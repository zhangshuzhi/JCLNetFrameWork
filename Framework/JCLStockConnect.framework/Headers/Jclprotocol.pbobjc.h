// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/jclprotocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AnalyDataB;
@class AuctionDataB;
@class BSQueue;
@class BaseCWInfo;
@class CWInfo;
@class CqcxCWInfo;
@class CurrStockDataBEx;
@class GPBAny;
@class KCBDATA;
@class KCBDataEx;
@class MinuteInfo;
@class PKData;
@class PriceVolTable;
@class RFormularGroupList;
@class RFormularSelfIndex;
@class RSPDATA;
@class ReCalcOutVarInfo;
@class ReCalcParamInfoEx;
@class StkInfoNew;
@class StrategyGS_Result;
@class StrategyPoolCxqnJhjjZtqd_List;
@class Strategy_HisSignal_Data;
@class TickInfo;
@class analy_range_req;
@class cloudCalcResult;
@class dxjl_data;
@class gsResult;
@class hostmore_info;
@class hq_with_fields;
@class moneyflow_data;
@class report_package;
@class stock_block_fields;
@class tagCodeWithNkey;
@class zhsort_item;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum report_reqno

/**
 * 请求的功能号：功能号集中放在请求的TCP包头和应答的包头
 * 考虑到对其他协议支持，保持完整性，protobuffer有req请求功能号
 **/
typedef GPB_ENUM(report_reqno) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  report_reqno_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 通用错误应答 */
  report_reqno_ErrorReq = 0,

  /** 主站监控信息 */
  report_reqno_MonitorReq = 21,

  /** 请求股本除权数据 */
  report_reqno_AutogbbqReq = 22,

  /** 请求财务数据 */
  report_reqno_AutobaseReq = 23,
  report_reqno_HostmoreReq = 31,

  /** TCP行情推送订阅请求 */
  report_reqno_PushHqSub = 134,

  /** TCP行情推送取消订阅请求 */
  report_reqno_PushHqUnsub = 135,
  report_reqno_PushStrHqSub = 144,
  report_reqno_PushStrHqUnsub = 145,
  report_reqno_PushDxSub = 150,
  report_reqno_PushDxUnsub = 151,

  /** 请求对应市场代码链(含中英文名称)  CODE6_NREQ=1110 */
  report_reqno_CodeNewReq = 1111,

  /** 请求综合排名数据 */
  report_reqno_ZhsortReq = 1205,

  /** 请求Average.csv */
  report_reqno_CombaverageNreq = 1359,

  /** 请求block.xml */
  report_reqno_CombblockNreq = 1360,

  /** 分价表 */
  report_reqno_FjbReq = 1365,

  /** 按时间段请求原始K线数据 */
  report_reqno_AnalyRangeReq = 1367,

  /** 1-10日分时走势数据 */
  report_reqno_MinuteReq = 1369,

  /** 复权K线数据 */
  report_reqno_AnalyTqReq = 1370,

  /** 请求分类排序行情 */
  report_reqno_SortHqReq = 1727,

  /** 请求指定若干品种行情 */
  report_reqno_MultiHqReq = 1728,

  /** 请求指定若干品种行情（带指标结果） */
  report_reqno_MultiExHqReq = 1729,

  /** 全档买卖盘口 */
  report_reqno_FullMmpReq = 1730,

  /** 逐笔成交明细 */
  report_reqno_L2TickReq = 1732,

  /** 全景GPS */
  report_reqno_StockGpsReq = 1733,

  /** 请求全部排序代码 */
  report_reqno_SortCodeReq = 1734,

  /** 买卖盘口委托队列 */
  report_reqno_MmpTickReq = 1735,

  /** 所有股票实时资金流 */
  report_reqno_AllMoneyflowReq = 1801,

  /** 单只股票实时资金流 */
  report_reqno_OneMoneyflowReq = 1802,

  /** 单只股票历史资金流 DAY */
  report_reqno_HisMoneyflowReq = 1805,

  /** 所有股票多日累积资金流 */
  report_reqno_AllMoneyflowXdaysReq = 1806,

  /** 单只股票历史资金流 MIN */
  report_reqno_HisMoneyflowMinReq = 1807,

  /** 根据时间段下载资金流 */
  report_reqno_HisMoneyflowTimeReq = 1808,

  /** 单只股票多日资金数据请求 */
  report_reqno_OneMoneyflowXdayReq = 1818,

  /** 计算的数据请求 */
  report_reqno_CalcHisdataReq = 1901,

  /** 当日不停变换的盘中数据 */
  report_reqno_CalcCurdataReq = 1902,

  /** 基金的历史净值数据 */
  report_reqno_FundHisReq = 2001,

  /** 基金综合排名 */
  report_reqno_FundZhsortReq = 2006,

  /** 板块成分股排序行情 */
  report_reqno_BlockSortHqReq = 2008,

  /** 可转债代码链 */
  report_reqno_BondCodeReq = 2010,

  /** 请求分级基金代码信息（带利率规则） */
  report_reqno_FundCodelistReq = 2011,

  /** 请求分类排序行情（支持额外扩展字段） */
  report_reqno_SortExHqReq = 2015,
  report_reqno_SortShqExReq = 2017,
  report_reqno_SortStockBlockReq = 2019,
  report_reqno_SortNohqExReq = 2021,
  report_reqno_SortNoshqExReq = 2023,

  /** 指标列表请求 */
  report_reqno_FormularListReq = 3030,

  /** 单个指标结果输出（暂时不处理） */
  report_reqno_FormularCalcReq = 3031,

  /** 单个指标的选股结果  //一键选股协议 */
  report_reqno_FormularOnexgReq = 3032,

  /** 所有指标的选股结果(新) */
  report_reqno_FormularAllxgReq = 3033,

  /** 单个指标板块日波动结果 */
  report_reqno_FormularBkxgReq = 3034,

  /** 指标类型选股结果（for android） */
  report_reqno_FormularTpxgReq = 3035,

  /** 所有指标的选股结果(历史) */
  report_reqno_FormularAllxgHisReq = 3039,

  /** 所有指标的选股结果(单个品种) */
  report_reqno_FormularAllxgOneReq = 3040,

  /** 指标选股样本空间查询请求 */
  report_reqno_FormularCodelistReq = 3051,

  /** 指标选股样本空间修改请求 */
  report_reqno_FormularCodelistModify = 3052,

  /** 指标选股样本空间分组创建请求 */
  report_reqno_FormularCodelistCreate = 3053,

  /** 指标选股样本空间分组删除请求 */
  report_reqno_FormularCodelistDelete = 3054,

  /** 历史分时走势数据 */
  report_reqno_HisMinuteReq = 4068,

  /** Tick数据 */
  report_reqno_TickReq = 4069,

  /** 历史Tick数据 */
  report_reqno_HisTickReq = 4070,

  /** 公式云计算排序 */
  report_reqno_CloudCalcSortReq = 5013,

  /** 6000 ~ 6100 预留给公式增值服务 */
  report_reqno_FormularselfindexReq = 6000,

  /** 请求整个集合的公式，应答 FormularSet_Ans */
  report_reqno_FormularsetReq = 6001,

  /** 计算后的公式请求(如果只是提取因子库，不用指定参数，指定也无效，已经计算好了) */
  report_reqno_RecalcfomularReq = 6002,

  /** 集合竞价带未匹配量 */
  report_reqno_AuctiondataReq = 10029,

  /** 获取盘后定价交易扩展数据 */
  report_reqno_AfterTradeReq = 10032,

  /** 尾盘集合竞价数据 */
  report_reqno_AuctiondataCcallReq = 10036,

  /** 涨跌幅区间 */
  report_reqno_ZdfsectionReq = 20001,

  /** 涨跌幅结果 */
  report_reqno_ZdfresultReq = 20002,

  /** 涨跌幅曲线 */
  report_reqno_ZdfprofitReq = 20003,

  /** 涨跌停个数曲线 */
  report_reqno_ZdfzdtnumReq = 20004,

  /** 昨日非一字板涨停品种 */
  report_reqno_FyzbztresultReq = 20005,

  /** 涨跌停品种 */
  report_reqno_ZdtresultReq = 20006,

  /** 策略中心列表 */
  report_reqno_StrategycenterListReq = 20100,

  /** 策略中心 收益曲线 */
  report_reqno_StrategycenterProfitReq = 20101,

  /** 策略中心 选股成功率 */
  report_reqno_StrategycenterSuccessReq = 20102,

  /** 一键选股 */
  report_reqno_StrategyonekeyReq = 20104,

  /** 一键选股收益曲线 */
  report_reqno_StrategyonekeyProfitReq = 20105,

  /** 一键选股结果 */
  report_reqno_StrategyonekeyResultReq = 20106,

  /** 股票池 */
  report_reqno_StrategypoolReq = 20107,

  /** 大数据选股-次新擒牛 */
  report_reqno_BigdataCxqnReq = 20108,

  /** 大数据选股-集合竞价 */
  report_reqno_BigdataJhjjReq = 20109,

  /** 大数据选股-涨停捉妖 */
  report_reqno_BigdataZtzyReq = 20110,

  /** 策略中心 今日调仓 */
  report_reqno_StrategycenterJrtcReq = 20111,

  /** 策略中心 当前持仓 */
  report_reqno_StrategycenterDqccReq = 20112,

  /** 策略中心 策略牛股 */
  report_reqno_StrategycenterClngReq = 20113,

  /** 历史信号 */
  report_reqno_StrategycenterSignalReq = 20114,

  /** 热门强龙策略请求 动态选股策略请求 */
  report_reqno_StrategyRmqlDtxgReq = 20115,

  /** 价值投资 */
  report_reqno_StrategyJztzReq = 20116,
  report_reqno_StrategyGscalclistReq = 20117,
  report_reqno_StrategyGsresultReq = 20118,

  /** 评级请求 */
  report_reqno_StrategyLevelReq = 20150,

  /** RPS数据 */
  report_reqno_RpsdataReq = 20201,

  /** 广度深度宽度数据请求 */
  report_reqno_GskdataReq = 20202,

  /** 短线精灵 */
  report_reqno_DxjlReq = 20400,
  report_reqno_HqfdReq = 20401,

  /** 资金流向 */
  report_reqno_MoneyFlowReq = 20500,

  /** 请求/应答内容为json格式的协议报文 */
  report_reqno_JsonReq = 30000,

  /** 组合请求，多个请求一个protobuf到服务端，处理完一次性返回给客户端 */
  report_reqno_ComboReq = 30001,
};

GPBEnumDescriptor *report_reqno_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL report_reqno_IsValidValue(int32_t value);

#pragma mark - Enum domain_idx

typedef GPB_ENUM(domain_idx) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  domain_idx_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 上海A股 */
  domain_idx_DiShag = 0,

  /** 上海B股 */
  domain_idx_DiShbg = 1,

  /** 深圳A股 */
  domain_idx_DiSzag = 2,

  /** 深圳B股 */
  domain_idx_DiSzbg = 3,

  /** 上海债券 */
  domain_idx_DiShboud = 4,

  /** 深圳债券 */
  domain_idx_DiSzboud = 5,

  /** A股 */
  domain_idx_DiAg = 6,

  /** B股 */
  domain_idx_DiBg = 7,

  /** 债券 */
  domain_idx_DiBond = 8,

  /** 基金 */
  domain_idx_DiFund = 9,

  /** 所有品种 */
  domain_idx_DiAllgp = 10,

  /** 所有指数 */
  domain_idx_DiAllindex = 11,

  /** 中小企业 */
  domain_idx_DiZhongxiao = 12,

  /** 创业板 */
  domain_idx_DiGem = 13,

  /** 股转系统 */
  domain_idx_DiSb = 14,

  /** 退市整理版 */
  domain_idx_DiDelisting = 15,

  /** 权证 */
  domain_idx_DiOption = 17,

  /** DI_GEM = 18;                // 创业板 */
  domain_idx_DiBh = 19,

  /** 大连商品 */
  domain_idx_DiQhDlsp = 20,

  /** 郑州商品 */
  domain_idx_DiQhZzsp = 21,

  /** 上海期货 */
  domain_idx_DiQhShsp = 22,

  /** 股指期货 */
  domain_idx_DiQhGzqh = 23,

  /** 上海金 */
  domain_idx_DiSj = 24,

  /** 伦敦金 */
  domain_idx_DiLdj = 25,

  /** 天津贵金属 */
  domain_idx_DiTj = 26,

  /** 比特币 */
  domain_idx_DiBtb = 27,

  /** 可转债 */
  domain_idx_DiKzz = 28,

  /** 所有板块 */
  domain_idx_DiAllBlock = 30,

  /** 地域 */
  domain_idx_DiArea = 31,

  /** 行业 */
  domain_idx_DiIndustry = 32,

  /** 概念 */
  domain_idx_DiConcept = 33,

  /** 热门板块-所有 */
  domain_idx_DiRmBlockAll = 34,

  /** 热门板块-地域 */
  domain_idx_DiRmBlockArea = 35,

  /** 热门板块-行业 */
  domain_idx_DiRmBlockIndustry = 36,

  /** 热门板块-概念 */
  domain_idx_DiRmBlockConcept = 37,

  /** 海峡艺术品交易所-所有品种 */
  domain_idx_DiHx = 38,

  /** 海峡艺术品交易所-艺术主板 */
  domain_idx_DiHxYszb = 39,

  /** 海峡艺术品交易所-艺术新版 */
  domain_idx_DiHxYsxb = 40,

  /** 海峡艺术品交易所-邮票收藏 */
  domain_idx_DiHxYbsc = 41,

  /** 海峡艺术品交易所-钱币收藏 */
  domain_idx_DiHxQbsc = 42,

  /** 海峡艺术品交易所-配售缴款 */
  domain_idx_DiHxPsjk = 43,

  /** 海峡艺术品交易所-茶产权版 */
  domain_idx_DiHxCcqb = 44,

  /** 齐鲁商品 */
  domain_idx_DiQhQl = 50,

  /** 横琴稀贵 */
  domain_idx_DiQhHqxg = 51,

  /** 伦敦金 */
  domain_idx_DiQhAllLdj = 52,

  /** 鹏华基金公司发行的17个基金品种 */
  domain_idx_DiFundPenghua = 53,

  /** 广州茶叶商品期货-所有品种 */
  domain_idx_DiTea = 54,

  /** 广州茶叶商品期货-指数 */
  domain_idx_DiTeaZs = 55,

  /** 广州茶叶商品期货-商品 */
  domain_idx_DiTeaGoods = 56,

  /** 甬交所 */
  domain_idx_DiDpt = 57,

  /** 港股 */
  domain_idx_DiHk = 58,

  /** 沪深A股-行情报价 */
  domain_idx_DiAgHqbj = 70,

  /** 沪深A股-资金决策 */
  domain_idx_DiAgZjjc = 71,

  /** 沪深A股-财务数据 */
  domain_idx_DiAgCwsj = 72,

  /** 沪深A股-行情统计 */
  domain_idx_DiAgHqtj = 73,

  /** 科创板 */
  domain_idx_DiScienceTechnology = 74,

  /** ETF基金 */
  domain_idx_DiEtf = 75,

  /** 原油 */
  domain_idx_DiOil = 80,

  /** DI_BKZJ = 80;                //板块资金 */
  domain_idx_DiRmql = 81,

  /** 动态选股 */
  domain_idx_DiDtxg = 82,

  /** 大单统计 同沪深A股资金决策 */
  domain_idx_DiDdtj = 90,

  /** 价值投资 */
  domain_idx_DiJztz = 91,

  /**
   * 板块个股
   * DI_BLOCK_INDEX_MIN = 100;        //新的板块个数很多，在后面重新定义序号
   **/
  domain_idx_DiFirstAreaBlock = 100,
  domain_idx_DiLastAreaBlock = 199,
  domain_idx_DiFirstIndustryBlock = 200,
  domain_idx_DiLastIndustryBlock = 299,
  domain_idx_DiFirstConceptBlock = 300,

  /** DI_BLOCK_INDEX_MAX = 1300; */
  domain_idx_DiLastConceptBlock = 1300,

  /** 渤海商品 */
  domain_idx_DiFullscreenBhgoods = 1501,

  /** 5分钟领涨股(A股涨速排名) */
  domain_idx_DiFullscreenFive = 1502,

  /** 当日领涨股(A股涨幅排名) */
  domain_idx_DiFullscreenCurrday = 1503,

  /** 当日领涨板块(板块指数涨幅排名) */
  domain_idx_DiFullscreenCurrdaybk = 1504,
  domain_idx_DiFullscreenShag = 1505,
  domain_idx_DiFullscreenSzag = 1506,

  /** 地域 */
  domain_idx_DiFullscreenArea = 1507,

  /** 行业 */
  domain_idx_DiFullscreenIndustry = 1508,

  /** 概念 */
  domain_idx_DiFullscreenConcept = 1509,

  /** 自选股 */
  domain_idx_DiFullscreenZxg = 1510,

  /** 全景图板块成份股设置表头专用，不做分类使用 */
  domain_idx_DiFullscreenCurrdaybkGg = 1000,

  /** DI_FULLSCREEN_CURRDAYBK_GG + DI_BLOCK_INDEX_MIN; */
  domain_idx_DiFullscreenCurrdaybkGgFirst = 1100,

  /** DI_FULLSCREEN_CURRDAYBK_GG + DI_BLOCK_INDEX_MAX; */
  domain_idx_DiFullscreenCurrdaybkGgLast = 2300,

  /** 分级基金-B基金 */
  domain_idx_DiFundHomepage = 4000,

  /** 主题基金（挂钩指数、母基金、A基金、B基金） */
  domain_idx_DiFundSubject = 4001,

  /** B类基金 */
  domain_idx_DiFundB = 4002,

  /** 主题基金 */
  domain_idx_DiFundSubjectHot = 4003,

  /** 分级基金-A基金 */
  domain_idx_DiFundHomepageA = 4004,

  /** 分级基金-母基 */
  domain_idx_DiFundHomepageM = 4005,

  /** 分级基金-分级T+2 */
  domain_idx_DiFundHomepageFjT2 = 4006,

  /** 分级基金-分级T+1 */
  domain_idx_DiFundHomepageFjT1 = 4007,

  /** 分级基金-分级T+0 */
  domain_idx_DiFundHomepageFjT0 = 4008,

  /** 货币基金T+0 */
  domain_idx_DiFundMoneyT0 = 4009,

  /** 货币基金T+1 */
  domain_idx_DiFundMoneyT1 = 4010,

  /** 服务器支持排序分界值（以后可以调整） */
  domain_idx_DiSortMax = 9000,

  /** 系统板块 */
  domain_idx_DiSystemblock = 9001,

  /** 自选股 */
  domain_idx_DiCustom = 9002,

  /** 自选股-资金决策 */
  domain_idx_DiCustomZjjc = 9003,

  /** 自选股-财务数据 */
  domain_idx_DiCustomCwsh = 9004,

  /** 自选股-行情统计 */
  domain_idx_DiCustomHqtj = 9005,

  /** 上证回购 */
  domain_idx_DiShhg = 9007,

  /** 深圳回购 */
  domain_idx_DiSzhg = 9008,

  /** 指标选股  9011  wangzhuo */
  domain_idx_DiZbxg = 9011,

  /** A类轮动 */
  domain_idx_DiFundA = 9012,

  /** 智能K线 最可能上涨 */
  domain_idx_DiIkUp = 9100,

  /** 智能K线 匹配涨最优 */
  domain_idx_DiIkZy = 9101,

  /** 智能K线 今日最相似 */
  domain_idx_DiIkXs = 9102,

  /** 个股诊断 行业 */
  domain_idx_DiGzHy = 9103,

  /** 个股诊断 指数 */
  domain_idx_DiGzZs = 9104,

  /** 个股诊断 自选股 */
  domain_idx_DiGzCustom = 9105,

  /** 行情计算 */
  domain_idx_DiCustomHqcal = 9018,

  /** 次新擒牛 首次打开 */
  domain_idx_DiCxqnScdk = 9200,

  /** 次新擒牛 成功回封 */
  domain_idx_DiCxqnCghf = 9201,

  /** 次新擒牛 一字连板 */
  domain_idx_DiCxqnYzlb = 9202,

  /** 次新擒牛 再创新高 */
  domain_idx_DiCxqnZcxg = 9203,

  /** 次新擒牛 阶段超跌 */
  domain_idx_DiCxqnJdcd = 9204,

  /** 次新擒牛 低价潜力 */
  domain_idx_DiCxqnDjql = 9205,

  /** 集合竞价 涨停试盘 */
  domain_idx_DiJhjjZtsp = 9300,

  /** 集合竞价 跌停试盘 */
  domain_idx_DiJhjjDtsp = 9301,

  /** 集合竞价 集竞看多 */
  domain_idx_DiJhjjJjkd = 9302,

  /** 集合竞价 集竞看空 */
  domain_idx_DiJhjjJjkk = 9303,

  /** 集合竞价 多空混战 */
  domain_idx_DiJhjjDkhz = 9304,

  /** 涨停捉妖 */
  domain_idx_DiZtzy = 9400,

  /** 策略中心 今日调仓 */
  domain_idx_DiClzxJrtc = 9410,

  /** 策略中心 当前持仓 */
  domain_idx_DiClzxDqcc = 9411,

  /** 策略中心 策略牛股 */
  domain_idx_DiClzxClng = 9412,

  /** 市场热点 */
  domain_idx_DiScrd = 9450,

  /** 其它指数 */
  domain_idx_DiAgZsother = 9500,

  /** 过滤器 */
  domain_idx_DiFilter = 9588,

  /** 股票池 */
  domain_idx_DiGpcxg = 9600,

  /** 关联品种 */
  domain_idx_DiAgGlpz = 9700,

  /** 云选股板块 */
  domain_idx_DiFirstFormularBlock = 9800,
  domain_idx_DiLastFormularBlock = 9900,

  /** 条件股        注: 此处DI_CONDITION一定要设置为DI_FIRST_CUSTOM_BLOCK-1 */
  domain_idx_DiCondition = 9999,

  /** 自定义板块 */
  domain_idx_DiFirstCustomBlock = 10000,
};

GPBEnumDescriptor *domain_idx_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL domain_idx_IsValidValue(int32_t value);

#pragma mark - Enum coltype_idx

typedef GPB_ENUM(coltype_idx) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  coltype_idx_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 代码 */
  coltype_idx_Zqdm = 0,

  /** 证券名 */
  coltype_idx_Zqjc = 1,

  /** 昨收 */
  coltype_idx_Zrsp = 2,

  /** 今开 */
  coltype_idx_Jrkp = 3,

  /** 最高 */
  coltype_idx_Zgcj = 4,

  /** 最低 */
  coltype_idx_Zdcj = 5,

  /** 现价 */
  coltype_idx_Zjcj = 6,

  /** 叫买价 */
  coltype_idx_Zgjm = 7,

  /** 叫卖价 */
  coltype_idx_Zdjm = 8,

  /** 总手 */
  coltype_idx_Cjl = 9,

  /** 总金额 */
  coltype_idx_Cjje = 10,

  /** 现手 */
  coltype_idx_Xs = 11,

  /** 日升跌 */
  coltype_idx_Qrsd = 12,

  /** 笔升跌 */
  coltype_idx_Qbsd = 13,

  /** 涨幅 */
  coltype_idx_Zaf = 14,

  /** 振幅 */
  coltype_idx_Zef = 15,

  /** 均价 */
  coltype_idx_Junj = 16,

  /** 市盈率 */
  coltype_idx_Syl = 17,

  /** 委比 */
  coltype_idx_Wtb = 18,

  /** 内盘 */
  coltype_idx_Np = 19,

  /** 外盘 */
  coltype_idx_Wp = 20,

  /** 内外比 */
  coltype_idx_Lwb = 21,

  /** 委量差 */
  coltype_idx_Wlc = 22,

  /** 买手一 */
  coltype_idx_Bjl1 = 23,

  /** 卖手一 */
  coltype_idx_Sjl1 = 24,

  /** 买价一 */
  coltype_idx_Bj1 = 25,

  /** 卖价一 */
  coltype_idx_Sj1 = 26,

  /** 买价二 */
  coltype_idx_Bj2 = 27,

  /** 买手二 */
  coltype_idx_Bjl2 = 28,

  /** 卖价二 */
  coltype_idx_Sj2 = 29,

  /** 卖手二 */
  coltype_idx_Sjl2 = 30,

  /** 买价三 */
  coltype_idx_Bj3 = 31,

  /** 买手三 */
  coltype_idx_Bjl3 = 32,

  /** 卖价三 */
  coltype_idx_Sj3 = 33,

  /** 卖手三 */
  coltype_idx_Sjl3 = 34,

  /** 量比 */
  coltype_idx_Liangb = 35,

  /** 换手率 */
  coltype_idx_JHsl = 36,

  /** 流通股本 */
  coltype_idx_JLtgb = 37,

  /** 流通市值 */
  coltype_idx_JLtsz = 38,

  /** 总市值 */
  coltype_idx_JZsz = 39,

  /** 多空平衡 */
  coltype_idx_Dkph = 40,

  /** 多头获利 */
  coltype_idx_Dthl = 41,

  /** 多头止损 */
  coltype_idx_Dtzs = 42,

  /** 空头回补 */
  coltype_idx_Kthb = 43,

  /** 空头止损 */
  coltype_idx_Ktzs = 44,

  /** 强弱度 */
  coltype_idx_Qrd = 45,

  /** 涨速 */
  coltype_idx_Zangsu = 46,

  /** 活路度 */
  coltype_idx_Hyd = 47,

  /** 每笔均量 */
  coltype_idx_Mbzl = 48,

  /** 每笔换手 */
  coltype_idx_Mbhsl = 49,

  /** 更新日期 */
  coltype_idx_JGxrq = 50,

  /** 上市日期 */
  coltype_idx_JStart = 51,

  /** 总股本 */
  coltype_idx_JZgb = 52,

  /** 国家股 */
  coltype_idx_JGjg = 53,

  /** 发起人法人股 */
  coltype_idx_JFqrfrg = 54,

  /** 法人股 */
  coltype_idx_JFrg = 55,

  /** B股 */
  coltype_idx_JBg = 56,

  /** H股 */
  coltype_idx_JHg = 57,

  /** 职工股 */
  coltype_idx_JZgg = 58,

  /** 总资产(千元) */
  coltype_idx_JZzc = 59,

  /** 流动资产 */
  coltype_idx_JLdzc = 60,

  /** 固定资产 */
  coltype_idx_JGdzc = 61,

  /** 无形资产 */
  coltype_idx_JWxzc = 62,

  /** 长期投资 */
  coltype_idx_JCqtz = 63,

  /** 流动负债 */
  coltype_idx_JLdfz = 64,

  /** 长期负债 */
  coltype_idx_JCqfz = 65,

  /** 资本公积金 */
  coltype_idx_JZbgjj = 66,

  /** 股东权益(就是净资产) */
  coltype_idx_JJzc = 67,

  /** 主营收入 */
  coltype_idx_JZysy = 68,

  /** 主营利益 */
  coltype_idx_JZyly = 69,

  /** 其它利益 */
  coltype_idx_JQtly = 70,

  /** 营业利益 */
  coltype_idx_JYyly = 71,

  /** 投资收益 */
  coltype_idx_JTzsy = 72,

  /** 补贴收入 */
  coltype_idx_JBtsy = 73,

  /** 营业外收支 */
  coltype_idx_JYywsz = 74,

  /** 上年损益调整 */
  coltype_idx_JSnsytz = 75,

  /** 利益总额 */
  coltype_idx_JLyze = 76,

  /** 税后利益 */
  coltype_idx_JShly = 77,

  /** 净利益 */
  coltype_idx_JJly = 78,

  /** 未分配利益 */
  coltype_idx_JWfply = 79,

  /** 调整每股净资产 */
  coltype_idx_JTzmgjz = 80,

  /** 净益率 */
  coltype_idx_JJyl = 81,

  /** 每股未分配 */
  coltype_idx_JMgwfp = 82,

  /** 每股收益 */
  coltype_idx_JMgsy = 83,

  /** 每股公积金 */
  coltype_idx_JMggjj = 84,

  /** 每股净资产 */
  coltype_idx_JMgjzc = 85,

  /** 股东权益比 */
  coltype_idx_JGdqyb = 86,

  /** 指标排序栏目 */
  coltype_idx_Zbcol = 87,

  /** 外汇简称 */
  coltype_idx_SpellCode = 88,

  /** 期货结算价 */
  coltype_idx_QhJsj = 89,

  /** 期货前结算价 */
  coltype_idx_QhYjsj = 90,

  /** 大福三方特有 */
  coltype_idx_Spread = 91,

  /** 买卖单位 */
  coltype_idx_Bsunit = 92,

  /** 货币单位 */
  coltype_idx_Currencyname = 93,

  /** 平均价 */
  coltype_idx_Averprice = 94,

  /** 收益率 */
  coltype_idx_Yieldval = 95,

  /** 年最高 */
  coltype_idx_HisHigh = 96,

  /** 年最低 */
  coltype_idx_HisLow = 97,

  /** 参考价 */
  coltype_idx_Iep = 98,

  /** 参考量 */
  coltype_idx_Iev = 99,

  /** 市值 */
  coltype_idx_Mrkcap = 100,

  /** 与现有17重复 PE                = 101;    //市盈率 */
  coltype_idx_Preminum = 102,

  /** 贡杆比率% */
  coltype_idx_Gearing = 103,

  /** 行使价 */
  coltype_idx_Execprice = 104,

  /** 换购比率 */
  coltype_idx_Convratio = 105,

  /** 到期日 */
  coltype_idx_Expiredate = 106,

  /** 交易价（不含税价，下同） */
  coltype_idx_Notaxprcie = 107,

  /** 订货保证金 */
  coltype_idx_Depositmoney = 108,

  /** 增仓保证金 */
  coltype_idx_Daydepositmoney = 109,

  /** 平均含税价 */
  coltype_idx_Avgtaxprice = 110,

  /** 添加日期 */
  coltype_idx_Zxgtime = 117,

  /** 所属板块 */
  coltype_idx_Ssbk = 118,

  /** 主力净值 */
  coltype_idx_Zljz = 119,

  /** 主力占比 */
  coltype_idx_Zlzb = 120,

  /** 私募净值 */
  coltype_idx_Smjz = 121,

  /** 私募占比 */
  coltype_idx_Smzb = 122,

  /** Html信息 */
  coltype_idx_Htmlxx = 129,

  /** 紧急通告(营业部通知) */
  coltype_idx_Urgentxx = 130,

  /** 新闻搜索器 */
  coltype_idx_Newsgate1 = 131,

  /** 新闻搜索器 */
  coltype_idx_Newsgate2 = 132,

  /** 资金净流入 */
  coltype_idx_IZjjlr = 133,

  /** 资金净流入占盘比 */
  coltype_idx_IZjjlrbl = 134,

  /** 主力净流入 */
  coltype_idx_IZljlr = 135,

  /** 主力净流入占盘比 */
  coltype_idx_IZljlrbl = 136,

  /** 主力资金流入 */
  coltype_idx_IZlzjlr = 137,

  /** 主力资金流入占盘比 */
  coltype_idx_IZlzjlrbl = 138,

  /** 主力资金流出 */
  coltype_idx_IZlzjlc = 139,

  /** 主力资金流出占盘比 */
  coltype_idx_IZlzjlcbl = 140,

  /** 内外盘资金比 */
  coltype_idx_IInoutzjbl = 141,

  /** 主力成交占比 */
  coltype_idx_IZlcjbl = 142,

  /** 订货量 */
  coltype_idx_BhDhl = 143,

  /** 日增仓 */
  coltype_idx_BhRzc = 144,

  /** 持仓 */
  coltype_idx_Ccl = 145,

  /** 昨持仓, */
  coltype_idx_Zcc = 146,

  /** 持仓增减 */
  coltype_idx_Cczj = 147,

  /** 主力雷达 */
  coltype_idx_SZlld = 148,

  /** 主力强度 */
  coltype_idx_SZlqd = 149,

  /** 资金动力 */
  coltype_idx_SZjdl = 150,

  /** 序号 */
  coltype_idx_Rownum = 151,

  /** 分隔 */
  coltype_idx_Separator = 152,

  /** 领涨成分股 */
  coltype_idx_ZsLz = 153,

  /** 领跌成分股 */
  coltype_idx_ZsLd = 154,

  /** 成分股个数 */
  coltype_idx_ZsCfg = 155,

  /** 涨跌平 */
  coltype_idx_ZsZdp = 156,

  /** 上涨家数 */
  coltype_idx_ZsSzjs = 157,

  /** 下跌家数 */
  coltype_idx_ZsXdjs = 158,

  /** 平家数 */
  coltype_idx_ZsPjs = 159,

  /** 基金B代码 */
  coltype_idx_FundBcode = 160,

  /** 基金B名称 */
  coltype_idx_FundBname = 161,

  /** 基金B现价 */
  coltype_idx_FundBprice = 162,

  /** 基金B涨幅% */
  coltype_idx_FundBzaf = 163,

  /** 基金B净值(估算) */
  coltype_idx_FundBjingzhi = 164,

  /** 基金B溢价率% */
  coltype_idx_FundByjl = 165,

  /** 基金B份额变化率% */
  coltype_idx_FundBfebhl = 166,

  /** 申购套利% */
  coltype_idx_FundSgtlkj = 167,

  /** 配对套利% */
  coltype_idx_FundShtlkj = 168,

  /** 基金AB合并价 */
  coltype_idx_FundAbprice = 169,

  /** 母级基金代码 */
  coltype_idx_FundMcode = 170,

  /** 母级基金名称 */
  coltype_idx_FundMname = 171,

  /** 母级基金净值 */
  coltype_idx_FundMjingzhi = 172,

  /** 挂钩指数代码 */
  coltype_idx_FundZscode = 173,

  /** 挂钩指数名称 */
  coltype_idx_FundZsname = 174,

  /** 挂钩指数涨幅% */
  coltype_idx_FundZszaf = 175,

  /** 基金A代码 */
  coltype_idx_FundAcode = 176,

  /** 基金A名称 */
  coltype_idx_FundAname = 177,

  /** 基金A现价 */
  coltype_idx_FundAprice = 178,

  /** 基金A涨幅% */
  coltype_idx_FundAzaf = 179,

  /** 基金A净值(估算) */
  coltype_idx_FundAjingzhi = 180,

  /** 基金A溢价率% */
  coltype_idx_FundAyjl = 181,

  /** 基金B份额 */
  coltype_idx_FundBfe = 182,

  /** 基金B净值增长率% */
  coltype_idx_FundBjzbhl = 183,

  /** 上折阈值 */
  coltype_idx_FundFoldup = 184,

  /** 下折阈值 */
  coltype_idx_FundFolddown = 185,

  /** 上折差距% */
  coltype_idx_FundJzfoldup = 186,

  /** 下折差距% */
  coltype_idx_FundJzfolddown = 187,

  /** 基金B公告 */
  coltype_idx_FundBnotice = 188,

  /** 基金主题 */
  coltype_idx_FundSubject = 189,

  /** 申购价格 */
  coltype_idx_FundSgprice = 190,

  /** 赎回价格 */
  coltype_idx_FundShprice = 191,

  /** 整体溢价率% */
  coltype_idx_FundAbyjl = 192,

  /** 母级基金净值增长率% */
  coltype_idx_FundMjzbhl = 193,

  /** 母级基金公告 */
  coltype_idx_FundMnotice = 194,

  /** AB份额比率（A:B） */
  coltype_idx_FundFezb = 195,

  /** 基金A净值增长率% */
  coltype_idx_FundAjzbhl = 196,

  /** 基金A折价% */
  coltype_idx_FundAfoldprice = 197,

  /** 基金A到期收益% */
  coltype_idx_FundAprofit = 198,

  /** 基金A份额 */
  coltype_idx_FundAfe = 199,

  /** 基金A份额变化率% */
  coltype_idx_FundAfebhl = 200,

  /** 基金A剩余年限 */
  coltype_idx_FundArestday = 201,

  /** 基金A定期折算 */
  coltype_idx_FundAenddate = 202,

  /** 基金A约定收益率% */
  coltype_idx_FundAydprofit = 203,

  /** 基金A公告 */
  coltype_idx_FundAnotice = 204,

  /** 1日主力净买额 */
  coltype_idx_MoneyZljme1 = 205,

  /** 2日主力净买额 */
  coltype_idx_MoneyZljme2 = 206,

  /** 3日主力净买额 */
  coltype_idx_MoneyZljme3 = 207,

  /** 4日主力净买额 */
  coltype_idx_MoneyZljme4 = 208,

  /** 5日主力净买额 */
  coltype_idx_MoneyZljme5 = 209,

  /** 1日主力净占比 */
  coltype_idx_MoneyZljzb1 = 210,

  /** 2日主力净占比 */
  coltype_idx_MoneyZljzb2 = 211,

  /** 3日主力净占比 */
  coltype_idx_MoneyZljzb3 = 212,

  /** 4日主力净占比 */
  coltype_idx_MoneyZljzb4 = 213,

  /** 5日主力净占比 */
  coltype_idx_MoneyZljzb5 = 214,

  /** 1日散户净买额 */
  coltype_idx_MoneyShjme1 = 215,

  /** 2日散户净买额 */
  coltype_idx_MoneyShjme2 = 216,

  /** 3日散户净买额 */
  coltype_idx_MoneyShjme3 = 217,

  /** 4日散户净买额 */
  coltype_idx_MoneyShjme4 = 218,

  /** 5日散户净买额 */
  coltype_idx_MoneyShjme5 = 219,

  /** 1日散户净占比 */
  coltype_idx_MoneyShjzb1 = 220,

  /** 2日散户净占比 */
  coltype_idx_MoneyShjzb2 = 221,

  /** 3日散户净占比 */
  coltype_idx_MoneyShjzb3 = 222,

  /** 4日散户净占比 */
  coltype_idx_MoneyShjzb4 = 223,

  /** 5日散户净占比 */
  coltype_idx_MoneyShjzb5 = 224,

  /** 净值(估算) */
  coltype_idx_FundJingzhi = 225,

  /** 溢价率% */
  coltype_idx_FundYjl = 226,

  /** 净值更新日期 */
  coltype_idx_FundUpdatedate = 227,

  /** 基金仓位系数 */
  coltype_idx_FundPosition = 228,

  /** B基金公布净值 */
  coltype_idx_FundBRealJz = 229,

  /** B基金价格杠杆 */
  coltype_idx_FundPricelevel = 230,

  /** B基金净值杠杆 */
  coltype_idx_FundLevel = 231,

  /** B基金实际杠杆 */
  coltype_idx_FundRealLevel = 232,

  /** B基金融资成本 */
  coltype_idx_FundFinance = 233,

  /** T-1溢价率 */
  coltype_idx_FundAbyjlT1 = 234,

  /** T-2溢价率 */
  coltype_idx_FundAbyjlT2 = 235,

  /** A基金份额新增(万份) */
  coltype_idx_FundAfeInc = 236,

  /** 利率规则 */
  coltype_idx_FundRateRule = 237,

  /** 本期利率 */
  coltype_idx_FundRate = 238,

  /** 下期利率 */
  coltype_idx_FundRateNext = 239,

  /** 母基公布净值 */
  coltype_idx_FundMRelJz = 240,

  /** 基金成立日期 */
  coltype_idx_FundCreate = 241,

  /** A基金成交额(亿) */
  coltype_idx_FundACjje = 242,

  /** B基金成交额(亿) */
  coltype_idx_FundBCjje = 243,

  /** A基金换手率 */
  coltype_idx_FundAHsl = 244,

  /** B基金换手率 */
  coltype_idx_FundBHsl = 245,

  /** B基金份额新增(万份) */
  coltype_idx_FundBfeInc = 246,

  /** 母基价格 */
  coltype_idx_FundMprice = 247,

  /** 母基涨幅 */
  coltype_idx_FundMzaf = 248,

  /** 母基溢价率 */
  coltype_idx_FundMyjl = 249,

  /** 母子溢价率 */
  coltype_idx_FundMabyjl = 250,

  /** 基金到期日期 */
  coltype_idx_FundEnddate = 251,

  /** 基金类型 */
  coltype_idx_FundMType = 252,

  /** FUND_END = 252;    //基金排序终止列 */
  coltype_idx_Tipdis = 253,

  /** 正股代码 */
  coltype_idx_Zgcode = 254,

  /** 正股名称 */
  coltype_idx_Zgname = 255,

  /** 正股价 */
  coltype_idx_Zgprice0 = 256,

  /** 正股涨幅 */
  coltype_idx_Zgzaf = 257,

  /** 正股净值产 */
  coltype_idx_Zgassets = 258,

  /** 正股市净率 */
  coltype_idx_Zgrate = 259,

  /** 转股起始日 */
  coltype_idx_Zgqsr = 260,

  /** 转股价 */
  coltype_idx_Zgprice1 = 261,

  /** 转股价值 */
  coltype_idx_Zgevalue = 262,

  /** 溢价率 */
  coltype_idx_Yjrate = 263,

  /** 回售触发比 */
  coltype_idx_Hscfb = 264,

  /** 回售触发价 */
  coltype_idx_Hscfprice = 265,

  /** 回售价 */
  coltype_idx_Hsprice = 266,

  /** 回售起始日 */
  coltype_idx_Hsqsr = 267,

  /** 强赎触发比 */
  coltype_idx_Qscfb = 268,

  /** 强赎触发价 */
  coltype_idx_Qscfprice = 269,

  /** 强赎价 */
  coltype_idx_Qsprice = 270,

  /** 强赎起始日 */
  coltype_idx_Qsqsr = 271,

  /** 债券规模 */
  coltype_idx_Bondamt = 272,

  /** 剩余规模 */
  coltype_idx_Restamt = 273,

  /** 转债占比 */
  coltype_idx_Zzrate = 274,

  /** 转债发行日期 */
  coltype_idx_Zzstartdate = 275,

  /** 转债到期日期 */
  coltype_idx_Zzenddate = 276,

  /** 剩余年限 */
  coltype_idx_Restday = 277,

  /** 利息 */
  coltype_idx_Interest = 278,

  /** 税前收益 */
  coltype_idx_Sqsy = 279,

  /** 税后收益 */
  coltype_idx_Shsy = 280,

  /** 行情涨停价 */
  coltype_idx_Ztjg = 281,

  /** 行情跌停价 */
  coltype_idx_Dtjg = 282,

  /** 个股资讯 */
  coltype_idx_GgF10 = 283,

  /** 股票池入选时间 */
  coltype_idx_Gpctime = 284,

  /** 股票池入选价格 */
  coltype_idx_Gpcprice = 285,

  /** 股票池入选涨幅 */
  coltype_idx_Gpczaf = 286,

  /** 股票池入选后5日最大涨幅 */
  coltype_idx_Gpc5Dayzaf = 287,

  /** 区域涨跌幅 */
  coltype_idx_Seczfcol = 288,

  /** 智能K线上涨概率 */
  coltype_idx_Ikszgl = 289,

  /** 智能K线匹配个股 */
  coltype_idx_Ikppgg = 290,

  /** 智能K线匹配时间段 */
  coltype_idx_Ikpptime = 291,

  /** 智能K线匹配度 */
  coltype_idx_Ikppd = 292,

  /** 5分钟涨幅 */
  coltype_idx_Zaf5Min = 293,

  /** 3日涨幅 */
  coltype_idx_Zaf3Days = 294,

  /** 5日涨幅 */
  coltype_idx_Zaf5Days = 295,

  /** 20日涨幅 */
  coltype_idx_Zaf20Days = 296,

  /** 连涨天数 */
  coltype_idx_ZangDays = 297,

  /** 20日最高价 */
  coltype_idx_High20Days = 298,

  /** 20日最低价 */
  coltype_idx_Low20Days = 299,

  /** 历史最高价 */
  coltype_idx_HighHis = 300,

  /** 历史最低价 */
  coltype_idx_LowHis = 301,

  /** 3个月涨幅 */
  coltype_idx_Zaf90Days = 302,

  /** 半年涨幅 */
  coltype_idx_Zaf180Days = 303,

  /** 一年涨幅 */
  coltype_idx_Zaf365Days = 304,

  /** 资金大单流入 */
  coltype_idx_MoneyBigin = 305,

  /** 资金大单流出 */
  coltype_idx_MoneyBigout = 306,

  /** 资金大单净额 */
  coltype_idx_MoneyPurebig = 307,

  /** 资金中单流入 */
  coltype_idx_MoneyMidin = 308,

  /** 资金中单流出 */
  coltype_idx_MoneyMidout = 309,

  /** 资金中单净额 */
  coltype_idx_MoneyPuremid = 310,

  /** 资金小单流入 */
  coltype_idx_MoneySmallin = 311,

  /** 资金小单流出 */
  coltype_idx_MoneySmallout = 312,

  /** 资金小单净额 */
  coltype_idx_MoneyPuresmall = 313,

  /** 连跌天数 */
  coltype_idx_DieDays = 315,

  /** 指标输出0 */
  coltype_idx_ZbState0 = 316,

  /** 指标输出1 */
  coltype_idx_ZbState1 = 317,

  /** 集合竞价-试盘时间 */
  coltype_idx_JhjjSptime = 318,

  /** 集合竞价-集竞多空 */
  coltype_idx_JhjjJjdk = 319,

  /** 涨停捉妖-入选价格 */
  coltype_idx_ZtzyPrice = 320,

  /** 涨停捉妖-入选涨幅 */
  coltype_idx_ZtzyZf = 321,

  /** 涨停捉妖-入选后五日涨幅 */
  coltype_idx_Ztzy5Dayzf = 322,

  /** 涨停捉妖-入选时间 */
  coltype_idx_ZtzyTime = 323,

  /** 策略中心-今日调仓-调仓 */
  coltype_idx_JrtcTc = 324,

  /** 策略中心-今日调仓-时间 */
  coltype_idx_JrtcTime = 325,

  /** 策略中心-今日调仓-价格 */
  coltype_idx_JrtcPrice = 326,

  /** 策略中心-今日调仓-止盈 */
  coltype_idx_JrtcZyprice = 327,

  /** 策略中心-今日调仓-止损 */
  coltype_idx_JrtcZsprice = 328,

  /** 策略中心-当前持仓-时间 */
  coltype_idx_DqccTime = 329,

  /** 策略中心-当前持仓-价格 */
  coltype_idx_DqccPrice = 330,

  /** 策略中心-当前持仓-当前收益 */
  coltype_idx_DqccDqsy = 331,

  /** 策略中心-当前持仓-止盈价格 */
  coltype_idx_DqccZyprice = 332,

  /** 策略中心-当前持仓-止损价格 */
  coltype_idx_DqccZsprice = 333,

  /** 策略中心-策略牛股-调入时间 */
  coltype_idx_ClngIntime = 334,

  /** 策略中心-策略牛股-调入价格 */
  coltype_idx_ClngPrice = 335,

  /** 策略中心-策略牛股-调出时间 */
  coltype_idx_ClngOuttime = 336,

  /** 策略中心-策略牛股-调出价格 */
  coltype_idx_ClngOutprice = 337,

  /** 策略中心-策略牛股-涨幅 */
  coltype_idx_ClngZaf = 338,

  /** 策略中心-策略牛股-次日涨幅 */
  coltype_idx_ClngInzaf = 339,

  /** 智能K线上涨幅度 */
  coltype_idx_IkZaf = 340,

  /** 次新擒牛-连板数 */
  coltype_idx_CxqnLbs = 341,

  /** 次新擒牛-累计涨幅 */
  coltype_idx_CxqnLjzf = 342,

  /** 次新擒牛-上市价格 */
  coltype_idx_CxqnSsjg = 343,

  /** 大数据选股-股票代码 */
  coltype_idx_BigdataGpdm = 344,

  /** 指标输出2 */
  coltype_idx_ZbState2 = 345,

  /** 指标输出3 */
  coltype_idx_ZbState3 = 346,

  /** 指标输出4 */
  coltype_idx_ZbState4 = 347,

  /** 阶段区间统计 -前收盘价 */
  coltype_idx_JdtjQspj = 352,

  /** 阶段区间统计 -开盘价 */
  coltype_idx_JdtjKpj = 353,

  /** 阶段区间统计-最高价 */
  coltype_idx_JdtjZgj = 354,

  /** 阶段区间统计-最低价 */
  coltype_idx_JdtjZdj = 355,

  /** 阶段区间统计-收盘价 */
  coltype_idx_JdtjSpj = 356,

  /** 阶段区间统计-成交量 */
  coltype_idx_JdtjCjl = 357,

  /** 阶段区间统计-成交额 */
  coltype_idx_JdtjCje = 358,

  /** 阶段区间统计-加权均价 */
  coltype_idx_JdtjJqjj = 359,

  /** 阶段区间统计-区间涨幅 */
  coltype_idx_JdtjQjzf = 360,

  /** 阶段区间统计- 区间振幅 */
  coltype_idx_JdtjQjzhengf = 361,

  /** 阶段区间统计-换手率 */
  coltype_idx_JdtjQjhsl = 362,

  /** 阶段区间统计-量变幅度 */
  coltype_idx_JdtjQjlbfd = 363,

  /** 盈利能力 */
  coltype_idx_LevelGain = 365,

  /** 成长能力 */
  coltype_idx_LevelGrow = 368,

  /** 安全性 */
  coltype_idx_LevelSafe = 369,

  /** 主力动向 */
  coltype_idx_LevelMain = 370,

  /** 价值评估 */
  coltype_idx_LevelCost = 371,

  /** 分红能力 */
  coltype_idx_LevelBonus = 372,

  /** 评级短期强弱 (对应排序的定义不要修改) */
  coltype_idx_PjShort = 387,

  /** 评级中期强弱 */
  coltype_idx_PjMiddle = 388,

  /** 评级综合 */
  coltype_idx_PjAll = 390,

  /** 英文名称 */
  coltype_idx_EnglishName = 394,

  /** 英文简称 */
  coltype_idx_EnglishAbbr = 395,

  /** NKEY */
  coltype_idx_StkNkey = 396,

  /** 市净率 */
  coltype_idx_JSjl = 397,

  /** 增加看盘复盘有用字段： */
  coltype_idx_OpenP = 400,

  /** 最高% ：（最高 - 昨收） / 昨收 * 100 */
  coltype_idx_HighP = 401,

  /** 最低% ：（最低 - 昨收） / 昨收 * 100 */
  coltype_idx_LowP = 402,

  /** 实体涨幅：（现价 - 今开） / 今开 * 100 */
  coltype_idx_ZfNew = 403,

  /** 回头波:（现价 - 最高） / 最高 * 100 */
  coltype_idx_Undertow = 404,

  /** 攻击波 : （现价 - 最低） / 最低 * 100 */
  coltype_idx_Attackwave = 405,

  /** 自选价 : 当时记录自选日字段时候的现价 */
  coltype_idx_ZxgPrice = 406,

  /** 自选收益：（现价 - 自选价） / 自选价 * 100 * / */
  coltype_idx_ZxgProfit = 407,
};

GPBEnumDescriptor *coltype_idx_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL coltype_idx_IsValidValue(int32_t value);

#pragma mark - Enum Period_idx

typedef GPB_ENUM(Period_idx) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Period_idx_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 5分钟k线 */
  Period_idx_PeriodMin5 = 0,
  Period_idx_PeriodMin15 = 1,
  Period_idx_PeriodMin30 = 2,
  Period_idx_PeriodHour = 3,
  Period_idx_PeriodDay = 4,
  Period_idx_PeriodWeek = 5,
  Period_idx_PeriodMonth = 6,

  /** /////////// */
  Period_idx_PeriodMin1 = 7,
  Period_idx_PeriodMinn = 8,
  Period_idx_PeriodDayn = 9,

  /** 季线,需要下载日线数据 */
  Period_idx_PeriodSeason = 10,

  /** 年线,需要下载日线数据 */
  Period_idx_PeriodYear = 11,
};

GPBEnumDescriptor *Period_idx_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Period_idx_IsValidValue(int32_t value);

#pragma mark - Enum RECAL_FORMU_TYPE

/**
 * ////////////////////////////////////////
 * / 公式部分
 * ////////////////////////////////////////
 **/
typedef GPB_ENUM(RECAL_FORMU_TYPE) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  RECAL_FORMU_TYPE_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 指标类型公式 */
  RECAL_FORMU_TYPE_PFZb = 0,

  /** 条件选股类型公式 */
  RECAL_FORMU_TYPE_PFTj = 1,

  /** 交易系统公式 */
  RECAL_FORMU_TYPE_PFJy = 2,

  /** 五彩K线公式 */
  RECAL_FORMU_TYPE_PFWc = 3,

  /** 自定义函数公式 */
  RECAL_FORMU_TYPE_PFFc = 4,

  /** VB */
  RECAL_FORMU_TYPE_PFVb = 5,

  /** 二进制函数类型，保存分组的时候用得上，因为用户函数也要分组 */
  RECAL_FORMU_TYPE_PFBin = 6,

  /** 全部 */
  RECAL_FORMU_TYPE_PFAl = 7,
  RECAL_FORMU_TYPE_PSepclineType = 8,

  /** 二进制方式的指标公式 */
  RECAL_FORMU_TYPE_PFBzb = 9,

  /** 组合 */
  RECAL_FORMU_TYPE_PFCombo = 10,
};

GPBEnumDescriptor *RECAL_FORMU_TYPE_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL RECAL_FORMU_TYPE_IsValidValue(int32_t value);

#pragma mark - JclprotocolRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface JclprotocolRoot : GPBRootObject
@end

#pragma mark - report_package

typedef GPB_ENUM(report_package_FieldNumber) {
  report_package_FieldNumber_Version = 1,
  report_package_FieldNumber_Cookie = 2,
  report_package_FieldNumber_MainId = 3,
  report_package_FieldNumber_AssisId = 4,
  report_package_FieldNumber_Req = 5,
  report_package_FieldNumber_Packdata = 6,
};

/**
 * 包头 + 包体
 **/
GPB_FINAL @interface report_package : GPBMessage

@property(nonatomic, readwrite) uint32_t version;

@property(nonatomic, readwrite) uint32_t cookie;

@property(nonatomic, readwrite) uint32_t mainId;

@property(nonatomic, readwrite) uint32_t assisId;

@property(nonatomic, readwrite) uint32_t req;

/** 下面是具体的包体 */
@property(nonatomic, readwrite, strong, null_resettable) GPBAny *packdata;
/** Test to see if @c packdata has been set. */
@property(nonatomic, readwrite) BOOL hasPackdata;

@end

#pragma mark - tagReportPackageArray

typedef GPB_ENUM(tagReportPackageArray_FieldNumber) {
  tagReportPackageArray_FieldNumber_ReportpackArray = 1,
};

GPB_FINAL @interface tagReportPackageArray : GPBMessage

/** 组合包，可以多个包一次性请求 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<report_package*> *reportpackArray;
/** The number of items in @c reportpackArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger reportpackArray_Count;

@end

#pragma mark - tagInt32

typedef GPB_ENUM(tagInt32_FieldNumber) {
  tagInt32_FieldNumber_I = 1,
};

GPB_FINAL @interface tagInt32 : GPBMessage

@property(nonatomic, readwrite) uint32_t i;

@end

#pragma mark - tagInt64

typedef GPB_ENUM(tagInt64_FieldNumber) {
  tagInt64_FieldNumber_I = 1,
};

GPB_FINAL @interface tagInt64 : GPBMessage

@property(nonatomic, readwrite) uint64_t i;

@end

#pragma mark - tagFloat

typedef GPB_ENUM(tagFloat_FieldNumber) {
  tagFloat_FieldNumber_F = 1,
};

GPB_FINAL @interface tagFloat : GPBMessage

@property(nonatomic, readwrite) float f;

@end

#pragma mark - tagDouble

typedef GPB_ENUM(tagDouble_FieldNumber) {
  tagDouble_FieldNumber_D = 1,
};

GPB_FINAL @interface tagDouble : GPBMessage

@property(nonatomic, readwrite) double d;

@end

#pragma mark - tagInt32Array

typedef GPB_ENUM(tagInt32Array_FieldNumber) {
  tagInt32Array_FieldNumber_IArray = 1,
};

GPB_FINAL @interface tagInt32Array : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *iArray;
/** The number of items in @c iArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger iArray_Count;

@end

#pragma mark - tagInt64Array

typedef GPB_ENUM(tagInt64Array_FieldNumber) {
  tagInt64Array_FieldNumber_IArray = 1,
};

GPB_FINAL @interface tagInt64Array : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *iArray;
/** The number of items in @c iArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger iArray_Count;

@end

#pragma mark - tagFloatArray

typedef GPB_ENUM(tagFloatArray_FieldNumber) {
  tagFloatArray_FieldNumber_FArray = 1,
};

GPB_FINAL @interface tagFloatArray : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBFloatArray *fArray;
/** The number of items in @c fArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fArray_Count;

@end

#pragma mark - tagDoubleArray

typedef GPB_ENUM(tagDoubleArray_FieldNumber) {
  tagDoubleArray_FieldNumber_DArray = 1,
};

GPB_FINAL @interface tagDoubleArray : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *dArray;
/** The number of items in @c dArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dArray_Count;

@end

#pragma mark - tagString

typedef GPB_ENUM(tagString_FieldNumber) {
  tagString_FieldNumber_S = 1,
};

GPB_FINAL @interface tagString : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *s;

@end

#pragma mark - tagCodeWithNkey

typedef GPB_ENUM(tagCodeWithNkey_FieldNumber) {
  tagCodeWithNkey_FieldNumber_Nkey = 1,
  tagCodeWithNkey_FieldNumber_Setcode = 2,
  tagCodeWithNkey_FieldNumber_Code = 3,
};

GPB_FINAL @interface tagCodeWithNkey : GPBMessage

/** 品种内部编码,如果提供内部编码，优先识别内部编码，code不用设置；如果不用内部编码，要设置为0 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite) int32_t setcode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

@end

#pragma mark - tagCodeWithNkeyArray

typedef GPB_ENUM(tagCodeWithNkeyArray_FieldNumber) {
  tagCodeWithNkeyArray_FieldNumber_CodeArray = 1,
};

GPB_FINAL @interface tagCodeWithNkeyArray : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<tagCodeWithNkey*> *codeArray;
/** The number of items in @c codeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger codeArray_Count;

@end

#pragma mark - BSQueue

typedef GPB_ENUM(BSQueue_FieldNumber) {
  BSQueue_FieldNumber_Total = 1,
  BSQueue_FieldNumber_Count = 2,
  BSQueue_FieldNumber_Add = 3,
  BSQueue_FieldNumber_Complete = 4,
  BSQueue_FieldNumber_Update = 5,
  BSQueue_FieldNumber_Cancel = 6,
  BSQueue_FieldNumber_VolumesArray = 7,
  BSQueue_FieldNumber_StateArray = 8,
};

/**
 * *
 * \@brief 最优价50档委托队列数据结构（需与客户端统一）
 **/
GPB_FINAL @interface BSQueue : GPBMessage

/** 实际总委托笔数 */
@property(nonatomic, readwrite) uint32_t total;

/** 发布的笔数 */
@property(nonatomic, readwrite) uint32_t count;

@property(nonatomic, readwrite) uint32_t add;

@property(nonatomic, readwrite) uint32_t complete;

@property(nonatomic, readwrite) uint32_t update;

@property(nonatomic, readwrite) uint32_t cancel;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *volumesArray;
/** The number of items in @c volumesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger volumesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *stateArray;
/** The number of items in @c stateArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stateArray_Count;

@end

#pragma mark - CurrStockDataBEx

typedef GPB_ENUM(CurrStockDataBEx_FieldNumber) {
  CurrStockDataBEx_FieldNumber_Nkey = 1,
  CurrStockDataBEx_FieldNumber_Source = 2,
  CurrStockDataBEx_FieldNumber_Status = 3,
  CurrStockDataBEx_FieldNumber_QuoteTime = 4,
  CurrStockDataBEx_FieldNumber_InOutFlag = 5,
  CurrStockDataBEx_FieldNumber_TickCount = 6,
  CurrStockDataBEx_FieldNumber_HqCount = 7,
  CurrStockDataBEx_FieldNumber_TradeCount = 8,
  CurrStockDataBEx_FieldNumber_PreClosePrice = 9,
  CurrStockDataBEx_FieldNumber_OpenPrice = 10,
  CurrStockDataBEx_FieldNumber_HighPrice = 11,
  CurrStockDataBEx_FieldNumber_LowPrice = 12,
  CurrStockDataBEx_FieldNumber_NowPrice = 13,
  CurrStockDataBEx_FieldNumber_Zangsu = 14,
  CurrStockDataBEx_FieldNumber_AveragePrice = 15,
  CurrStockDataBEx_FieldNumber_PriceDiff = 16,
  CurrStockDataBEx_FieldNumber_LimitUpPrice = 17,
  CurrStockDataBEx_FieldNumber_LimitDownPrice = 18,
  CurrStockDataBEx_FieldNumber_TaxPrice = 19,
  CurrStockDataBEx_FieldNumber_AverageTaxPrice = 20,
  CurrStockDataBEx_FieldNumber_PreSettlePrice = 21,
  CurrStockDataBEx_FieldNumber_SettlePrice = 22,
  CurrStockDataBEx_FieldNumber_Peratio = 23,
  CurrStockDataBEx_FieldNumber_Volume = 24,
  CurrStockDataBEx_FieldNumber_NowVol = 25,
  CurrStockDataBEx_FieldNumber_Amount = 26,
  CurrStockDataBEx_FieldNumber_NowAmount = 27,
  CurrStockDataBEx_FieldNumber_Inside = 28,
  CurrStockDataBEx_FieldNumber_Outside = 29,
  CurrStockDataBEx_FieldNumber_PreVolInStock = 30,
  CurrStockDataBEx_FieldNumber_VolInStock = 31,
  CurrStockDataBEx_FieldNumber_VolInStockDiff = 32,
  CurrStockDataBEx_FieldNumber_TotalBuyVolume = 33,
  CurrStockDataBEx_FieldNumber_TotalSellVolume = 34,
  CurrStockDataBEx_FieldNumber_BuyAveragePrice = 35,
  CurrStockDataBEx_FieldNumber_SellAveragePrice = 36,
  CurrStockDataBEx_FieldNumber_AllBuyPriceCount = 37,
  CurrStockDataBEx_FieldNumber_BuyTickCount = 38,
  CurrStockDataBEx_FieldNumber_AllSellPriceCount = 39,
  CurrStockDataBEx_FieldNumber_SellTickCount = 40,
  CurrStockDataBEx_FieldNumber_BuyPriceArray = 41,
  CurrStockDataBEx_FieldNumber_BuyVolumeArray = 42,
  CurrStockDataBEx_FieldNumber_SellPriceArray = 43,
  CurrStockDataBEx_FieldNumber_SellVolumeArray = 44,
  CurrStockDataBEx_FieldNumber_BuyQueue = 45,
  CurrStockDataBEx_FieldNumber_SellQueue = 46,
  CurrStockDataBEx_FieldNumber_PreNetValue = 47,
  CurrStockDataBEx_FieldNumber_NetValue = 48,
  CurrStockDataBEx_FieldNumber_EtfbuyNumber = 49,
  CurrStockDataBEx_FieldNumber_EtfsellNumber = 50,
  CurrStockDataBEx_FieldNumber_EtfbuyVolume = 51,
  CurrStockDataBEx_FieldNumber_EtfsellVolume = 52,
  CurrStockDataBEx_FieldNumber_EtfbuyAmount = 53,
  CurrStockDataBEx_FieldNumber_EtfsellAmount = 54,
  CurrStockDataBEx_FieldNumber_PreYield = 55,
  CurrStockDataBEx_FieldNumber_Yield = 56,
  CurrStockDataBEx_FieldNumber_Lead = 57,
  CurrStockDataBEx_FieldNumber_IndexUpCount = 58,
  CurrStockDataBEx_FieldNumber_IndexLevelCount = 59,
  CurrStockDataBEx_FieldNumber_IndexDownCount = 60,
  CurrStockDataBEx_FieldNumber_WarnCount = 61,
};

/**
 * *
 * \@brief 支持Level2格式的行情数据结构（需与客户端统一）
 **/
GPB_FINAL @interface CurrStockDataBEx : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

/** 行情来源 */
@property(nonatomic, readwrite) uint32_t source;

/** 品种交易状态 */
@property(nonatomic, readwrite) uint32_t status;

/** 行情时间 */
@property(nonatomic, readwrite) uint64_t quoteTime;

/** 内外盘标志 */
@property(nonatomic, readwrite) uint32_t inOutFlag;

/** TICK笔数 */
@property(nonatomic, readwrite) uint32_t tickCount;

/** 分比行情笔数 */
@property(nonatomic, readwrite) uint32_t hqCount;

/** 成交笔数 */
@property(nonatomic, readwrite) uint64_t tradeCount;

/** 前收盘价 */
@property(nonatomic, readwrite) double preClosePrice;

/** 今开盘价 */
@property(nonatomic, readwrite) double openPrice;

/** 最高价 */
@property(nonatomic, readwrite) double highPrice;

/** 最低价 */
@property(nonatomic, readwrite) double lowPrice;

/** 最新价 */
@property(nonatomic, readwrite) double nowPrice;

/** 涨速 */
@property(nonatomic, readwrite) double zangsu;

/** 平均成交价格 */
@property(nonatomic, readwrite) double averagePrice;

/** 笔升跌(价位差) */
@property(nonatomic, readwrite) double priceDiff;

/** 涨停价 */
@property(nonatomic, readwrite) double limitUpPrice;

/** 跌停价 */
@property(nonatomic, readwrite) double limitDownPrice;

/** 渤海现价含税价 */
@property(nonatomic, readwrite) double taxPrice;

/** 渤海平均含税价 */
@property(nonatomic, readwrite) double averageTaxPrice;

/** 期货昨结算价 */
@property(nonatomic, readwrite) double preSettlePrice;

/** 期货结算价 */
@property(nonatomic, readwrite) double settlePrice;

/** 市盈率 */
@property(nonatomic, readwrite) double peratio;

/** 总成交量(手) */
@property(nonatomic, readwrite) double volume;

/** 最近一笔成交量(手) */
@property(nonatomic, readwrite) double nowVol;

/** 总成交金额(元) */
@property(nonatomic, readwrite) double amount;

/** 最近一笔成交金额(元) */
@property(nonatomic, readwrite) double nowAmount;

/** 委买总成交量(手),内盘 */
@property(nonatomic, readwrite) double inside;

/** 委卖总成交量(手),外盘 */
@property(nonatomic, readwrite) double outside;

/** 期货昨持仓量 */
@property(nonatomic, readwrite) double preVolInStock;

/** 持仓量 */
@property(nonatomic, readwrite) double volInStock;

/** 持仓差 */
@property(nonatomic, readwrite) double volInStockDiff;

/** 委买申报总量(手) */
@property(nonatomic, readwrite) double totalBuyVolume;

/** 委卖申报总量(手) */
@property(nonatomic, readwrite) double totalSellVolume;

/** 委买平均申报价格 */
@property(nonatomic, readwrite) double buyAveragePrice;

/** 委卖平均申报价格 */
@property(nonatomic, readwrite) double sellAveragePrice;

/** 委买申报价位总数 */
@property(nonatomic, readwrite) uint32_t allBuyPriceCount;

/** 委买申报总笔数 */
@property(nonatomic, readwrite) uint32_t buyTickCount;

/** 委卖申报价位总数 */
@property(nonatomic, readwrite) uint32_t allSellPriceCount;

/** 委卖申报总笔数 */
@property(nonatomic, readwrite) uint32_t sellTickCount;

/** 最优十档委买申报价 */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *buyPriceArray;
/** The number of items in @c buyPriceArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger buyPriceArray_Count;

/** 最优十档委买申报量 */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *buyVolumeArray;
/** The number of items in @c buyVolumeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger buyVolumeArray_Count;

/** 最优十档委卖申报价 */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *sellPriceArray;
/** The number of items in @c sellPriceArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sellPriceArray_Count;

/** 最优十档委卖申报量 */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *sellVolumeArray;
/** The number of items in @c sellVolumeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sellVolumeArray_Count;

/** 最优买价50档买卖队列 */
@property(nonatomic, readwrite, strong, null_resettable) BSQueue *buyQueue;
/** Test to see if @c buyQueue has been set. */
@property(nonatomic, readwrite) BOOL hasBuyQueue;

/** 最优卖价50档买卖队列 */
@property(nonatomic, readwrite, strong, null_resettable) BSQueue *sellQueue;
/** Test to see if @c sellQueue has been set. */
@property(nonatomic, readwrite) BOOL hasSellQueue;

/** 基金T-1日净值 */
@property(nonatomic, readwrite) double preNetValue;

/** 基金实时参考净值(包括ETF的IOPV) */
@property(nonatomic, readwrite) double netValue;

/** ETF申购笔数 */
@property(nonatomic, readwrite) uint32_t etfbuyNumber;

/** ETF赎回笔数 */
@property(nonatomic, readwrite) uint32_t etfsellNumber;

/** ETF申购数量 */
@property(nonatomic, readwrite) double etfbuyVolume;

/** ETF赎回数量 */
@property(nonatomic, readwrite) double etfsellVolume;

/** ETF申购金额 */
@property(nonatomic, readwrite) double etfbuyAmount;

/** ETF赎回金额 */
@property(nonatomic, readwrite) double etfsellAmount;

/** 指数昨不含加权指数 */
@property(nonatomic, readwrite) double preYield;

/** 不含加权的指数 */
@property(nonatomic, readwrite) double yield;

/** 领先指标(指数) */
@property(nonatomic, readwrite) double lead;

/** 指数成分股上涨数 */
@property(nonatomic, readwrite) uint32_t indexUpCount;

/** 指数成分股持平数 */
@property(nonatomic, readwrite) uint32_t indexLevelCount;

/** 指数成分股下跌数 */
@property(nonatomic, readwrite) uint32_t indexDownCount;

/** (活跃度)报警次数 */
@property(nonatomic, readwrite) uint32_t warnCount;

@end

#pragma mark - PriceVolTable

typedef GPB_ENUM(PriceVolTable_FieldNumber) {
  PriceVolTable_FieldNumber_Price = 1,
  PriceVolTable_FieldNumber_Volume = 2,
  PriceVolTable_FieldNumber_Outside = 3,
  PriceVolTable_FieldNumber_Inside = 4,
  PriceVolTable_FieldNumber_Count = 5,
};

/**
 * *
 * \@brief 分价表数据（用分笔/逐笔数据统计）
 **/
GPB_FINAL @interface PriceVolTable : GPBMessage

/** 价格 */
@property(nonatomic, readwrite) double price;

/** 成交量 */
@property(nonatomic, readwrite) double volume;

/** 外盘 */
@property(nonatomic, readwrite) double outside;

/** 内盘 */
@property(nonatomic, readwrite) double inside;

/** 笔数 */
@property(nonatomic, readwrite) uint32_t count;

@end

#pragma mark - MinuteInfo

typedef GPB_ENUM(MinuteInfo_FieldNumber) {
  MinuteInfo_FieldNumber_JclTime = 1,
  MinuteInfo_FieldNumber_PreClose = 2,
  MinuteInfo_FieldNumber_OpenPrice = 3,
  MinuteInfo_FieldNumber_HighPrice = 4,
  MinuteInfo_FieldNumber_NowPrice = 5,
  MinuteInfo_FieldNumber_LowPrice = 6,
  MinuteInfo_FieldNumber_AvePrice = 7,
  MinuteInfo_FieldNumber_Amount = 8,
  MinuteInfo_FieldNumber_Volume = 9,
  MinuteInfo_FieldNumber_Up = 10,
  MinuteInfo_FieldNumber_Down = 11,
  MinuteInfo_FieldNumber_Equ = 12,
  MinuteInfo_FieldNumber_Lead = 13,
  MinuteInfo_FieldNumber_Buyvol = 14,
  MinuteInfo_FieldNumber_Sellvol = 15,
  MinuteInfo_FieldNumber_PreVolInStock = 16,
  MinuteInfo_FieldNumber_VolInStock = 17,
  MinuteInfo_FieldNumber_PreSettlePrice = 18,
  MinuteInfo_FieldNumber_SettlePrice = 19,
};

/**
 * *
 * \@brief 分钟数据信息
 * 可以与K线共用结构
 **/
GPB_FINAL @interface MinuteInfo : GPBMessage

/** />时间 */
@property(nonatomic, readwrite) uint64_t jclTime;

/** />昨收价 */
@property(nonatomic, readwrite) double preClose;

/** />开盘价 */
@property(nonatomic, readwrite) double openPrice;

/** />最高价 */
@property(nonatomic, readwrite) double highPrice;

/** />现价 */
@property(nonatomic, readwrite) double nowPrice;

/** />最低价 */
@property(nonatomic, readwrite) double lowPrice;

/** />均价 */
@property(nonatomic, readwrite) double avePrice;

/** />成交额 */
@property(nonatomic, readwrite) double amount;

/** />成交量 */
@property(nonatomic, readwrite) double volume;

/** />上涨加数 */
@property(nonatomic, readwrite) uint32_t up;

/** />下跌家数 */
@property(nonatomic, readwrite) uint32_t down;

/** />平盘家数 */
@property(nonatomic, readwrite) uint32_t equ;

/** />领先指标 */
@property(nonatomic, readwrite) double lead;

@property(nonatomic, readwrite) double buyvol;

@property(nonatomic, readwrite) double sellvol;

/** />昨持仓量 */
@property(nonatomic, readwrite) double preVolInStock;

/** />持仓量 */
@property(nonatomic, readwrite) double volInStock;

/** />昨结算价 只在日K以上存在 */
@property(nonatomic, readwrite) double preSettlePrice;

/** /> 结算价 只在日K以上存在 */
@property(nonatomic, readwrite) double settlePrice;

@end

#pragma mark - AnalyDataB

typedef GPB_ENUM(AnalyDataB_FieldNumber) {
  AnalyDataB_FieldNumber_DwItemNum = 1,
  AnalyDataB_FieldNumber_JclTime = 2,
  AnalyDataB_FieldNumber_FOpen = 3,
  AnalyDataB_FieldNumber_FHigh = 4,
  AnalyDataB_FieldNumber_FLow = 5,
  AnalyDataB_FieldNumber_FClose = 6,
  AnalyDataB_FieldNumber_FAmount = 7,
  AnalyDataB_FieldNumber_DVolume = 8,
  AnalyDataB_FieldNumber_Ccl = 9,
  AnalyDataB_FieldNumber_Jsj = 10,
  AnalyDataB_FieldNumber_Yclose = 11,
  AnalyDataB_FieldNumber_Up = 12,
  AnalyDataB_FieldNumber_Down = 13,
};

GPB_FINAL @interface AnalyDataB : GPBMessage

/** 采样点数 : 0 表示这个周期内，没有行情变动 */
@property(nonatomic, readwrite) uint32_t dwItemNum;

/** 时间精确到毫秒 */
@property(nonatomic, readwrite) uint64_t jclTime;

/** 存盘数据是long，保证精度；展示可以用float(如有特殊精度要求，用double) */
@property(nonatomic, readwrite) double fOpen;

/** 单位最高价 */
@property(nonatomic, readwrite) double fHigh;

/** 单位最低价 */
@property(nonatomic, readwrite) double fLow;

/** 单位收盘价 */
@property(nonatomic, readwrite) double fClose;

/** 单位均价(分钟线/期货) */
@property(nonatomic, readwrite) double fAmount;

/** 单位成交金额(日线/指数) */
@property(nonatomic, readwrite) double dVolume;

/** 持仓量（订货量)  VolInStock */
@property(nonatomic, readwrite) double ccl;

/** 昨日结算价 */
@property(nonatomic, readwrite) double jsj;

@property(nonatomic, readwrite) double yclose;

/** 指数,涨跌家数 */
@property(nonatomic, readwrite) uint32_t up;

/** 下跌家数 */
@property(nonatomic, readwrite) uint32_t down;

@end

#pragma mark - PKData

typedef GPB_ENUM(PKData_FieldNumber) {
  PKData_FieldNumber_Price = 1,
  PKData_FieldNumber_Vol = 2,
  PKData_FieldNumber_NumTrades = 3,
};

/**
 * *
 * \@brief 全档盘口单条详细数据结构
 **/
GPB_FINAL @interface PKData : GPBMessage

/** 价格 */
@property(nonatomic, readwrite) double price;

/** 数量 */
@property(nonatomic, readwrite) double vol;

/** 笔数 */
@property(nonatomic, readwrite) uint32_t numTrades;

@end

#pragma mark - TickInfo

typedef GPB_ENUM(TickInfo_FieldNumber) {
  TickInfo_FieldNumber_QuoteTime = 1,
  TickInfo_FieldNumber_Price = 2,
  TickInfo_FieldNumber_Vol = 3,
  TickInfo_FieldNumber_UnSuitVol = 4,
  TickInfo_FieldNumber_VolDiff = 5,
  TickInfo_FieldNumber_Flag = 6,
  TickInfo_FieldNumber_BuyNum = 7,
  TickInfo_FieldNumber_SellNum = 8,
};

/**
 * *
 * \@brief 分笔数据结构
 **/
GPB_FINAL @interface TickInfo : GPBMessage

/** />tick 行情时间 */
@property(nonatomic, readwrite) uint64_t quoteTime;

/** />价格,如果是集合竞价,则是匹配价格 */
@property(nonatomic, readwrite) double price;

/** />成交量,如果是集合竞价,则是匹配量 */
@property(nonatomic, readwrite) double vol;

/** />集合竞价未匹配量 */
@property(nonatomic, readwrite) double unSuitVol;

/** />期货持仓量增减 */
@property(nonatomic, readwrite) double volDiff;

/** />tick标识 */
@property(nonatomic, readwrite) uint32_t flag;

/** />买方逐笔委托编号 */
@property(nonatomic, readwrite) uint64_t buyNum;

/** />卖方逐笔委托编号 */
@property(nonatomic, readwrite) uint64_t sellNum;

@end

#pragma mark - CDPInfo

typedef GPB_ENUM(CDPInfo_FieldNumber) {
  CDPInfo_FieldNumber_Cdp = 1,
  CDPInfo_FieldNumber_Nh = 2,
  CDPInfo_FieldNumber_Nl = 3,
  CDPInfo_FieldNumber_Ah = 4,
  CDPInfo_FieldNumber_Al = 5,
  CDPInfo_FieldNumber_Dkflag = 6,
  CDPInfo_FieldNumber_Tbp = 7,
  CDPInfo_FieldNumber_Stoplost = 8,
  CDPInfo_FieldNumber_Leave = 9,
};

GPB_FINAL @interface CDPInfo : GPBMessage

/** 昨日中价 */
@property(nonatomic, readwrite) double cdp;

/** 卖点 */
@property(nonatomic, readwrite) double nh;

/** 买点 */
@property(nonatomic, readwrite) double nl;

/** 高价突破点 */
@property(nonatomic, readwrite) double ah;

/** 低价突破点 */
@property(nonatomic, readwrite) double al;

/** 适合作多或作空 */
@property(nonatomic, readwrite) uint32_t dkflag;

/** 多空平衡点 */
@property(nonatomic, readwrite) double tbp;

/** 止损点 */
@property(nonatomic, readwrite) double stoplost;

/** 了结点 */
@property(nonatomic, readwrite) double leave;

@end

#pragma mark - error_ans

typedef GPB_ENUM(error_ans_FieldNumber) {
  error_ans_FieldNumber_Errreqno = 1,
  error_ans_FieldNumber_Errinfo = 2,
};

/**
 * ERROR_REQ                    = 0;        //通用错误应答
 **/
GPB_FINAL @interface error_ans : GPBMessage

/** 发生错误的请求功能号 */
@property(nonatomic, readwrite) uint32_t errreqno;

/** 错误描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *errinfo;

@end

#pragma mark - monitorinfo_ans

typedef GPB_ENUM(monitorinfo_ans_FieldNumber) {
  monitorinfo_ans_FieldNumber_ClientNum = 1,
  monitorinfo_ans_FieldNumber_MaxConnectNum = 2,
  monitorinfo_ans_FieldNumber_PackageNum = 3,
  monitorinfo_ans_FieldNumber_HasStatus = 4,
  monitorinfo_ans_FieldNumber_HasLog = 5,
  monitorinfo_ans_FieldNumber_BHq = 6,
  monitorinfo_ans_FieldNumber_BWt = 7,
  monitorinfo_ans_FieldNumber_StarttimeArray = 8,
  monitorinfo_ans_FieldNumber_HostVer = 9,
  monitorinfo_ans_FieldNumber_ProtocolVer = 10,
  monitorinfo_ans_FieldNumber_TotalClientNum = 11,
  monitorinfo_ans_FieldNumber_UsedClientNum = 12,
  monitorinfo_ans_FieldNumber_BAutoBase = 13,
  monitorinfo_ans_FieldNumber_HomePath = 14,
  monitorinfo_ans_FieldNumber_NetCardStr = 15,
  monitorinfo_ans_FieldNumber_InfDate = 16,
  monitorinfo_ans_FieldNumber_InfHms = 17,
  monitorinfo_ans_FieldNumber_HostType = 18,
  monitorinfo_ans_FieldNumber_ProcType = 19,
  monitorinfo_ans_FieldNumber_CompressType = 20,
  monitorinfo_ans_FieldNumber_BDayToMem = 21,
  monitorinfo_ans_FieldNumber_BWeekToMem = 22,
  monitorinfo_ans_FieldNumber_BMonToMem = 23,
  monitorinfo_ans_FieldNumber_BMinToMem = 24,
  monitorinfo_ans_FieldNumber_BKexplain = 25,
  monitorinfo_ans_FieldNumber_BAlarm = 26,
  monitorinfo_ans_FieldNumber_BHqStat = 27,
  monitorinfo_ans_FieldNumber_ProcessNum = 28,
  monitorinfo_ans_FieldNumber_ThreadNum = 29,
  monitorinfo_ans_FieldNumber_Unused2Array = 30,
};

/**
 * MONITOR_REQ                = 21;        //主站监控信息
 **/
GPB_FINAL @interface monitorinfo_ans : GPBMessage

/** 当前在线人数 */
@property(nonatomic, readwrite) uint32_t clientNum;

/** 最大连接人数 */
@property(nonatomic, readwrite) uint32_t maxConnectNum;

/** 当前业务处理数量 */
@property(nonatomic, readwrite) uint32_t packageNum;

@property(nonatomic, readwrite) uint32_t hasStatus;

@property(nonatomic, readwrite) uint32_t hasLog;

@property(nonatomic, readwrite) uint32_t bHq;

@property(nonatomic, readwrite) uint32_t bWt;

/** [25]; */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *starttimeArray;
/** The number of items in @c starttimeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger starttimeArray_Count;

/** [30]; */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hostVer;

@property(nonatomic, readwrite) uint32_t protocolVer;

/** 当前总在线人数 */
@property(nonatomic, readwrite) uint32_t totalClientNum;

/** 从开启主站到现在有多少人登陆过 */
@property(nonatomic, readwrite) uint32_t usedClientNum;

@property(nonatomic, readwrite) uint32_t bAutoBase;

@property(nonatomic, readwrite, copy, null_resettable) NSString *homePath;

@property(nonatomic, readwrite, copy, null_resettable) NSString *netCardStr;

@property(nonatomic, readwrite) uint32_t infDate;

@property(nonatomic, readwrite) uint32_t infHms;

/** 服务器类型 独立，子，主 */
@property(nonatomic, readwrite) uint32_t hostType;

/** 0:批作业方式 1:多线程方式 */
@property(nonatomic, readwrite) uint32_t procType;

/** 压缩方式 0:自动优化 1:完全不压缩 2:最大限度压缩 */
@property(nonatomic, readwrite) uint32_t compressType;

@property(nonatomic, readwrite) uint32_t bDayToMem;

@property(nonatomic, readwrite) uint32_t bWeekToMem;

@property(nonatomic, readwrite) uint32_t bMonToMem;

@property(nonatomic, readwrite) uint32_t bMinToMem;

/** 是不是成功地启动了选股等服务 */
@property(nonatomic, readwrite) uint32_t bKexplain;

@property(nonatomic, readwrite) uint32_t bAlarm;

@property(nonatomic, readwrite) uint32_t bHqStat;

/** 进程数 */
@property(nonatomic, readwrite) uint32_t processNum;

/** 线程数 */
@property(nonatomic, readwrite) uint32_t threadNum;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *unused2Array;
/** The number of items in @c unused2Array without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger unused2Array_Count;

@end

#pragma mark - CqcxCWInfo

typedef GPB_ENUM(CqcxCWInfo_FieldNumber) {
  CqcxCWInfo_FieldNumber_Code = 1,
  CqcxCWInfo_FieldNumber_CwArray = 2,
};

/**
 * *
 * \@brief 除权除息数据结构（需与客户端统一）
 **/
GPB_FINAL @interface CqcxCWInfo : GPBMessage

/** 唯一ID号(唯一硬编码) */
@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CWInfo*> *cwArray;
/** The number of items in @c cwArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cwArray_Count;

@end

#pragma mark - CWInfo

typedef GPB_ENUM(CWInfo_FieldNumber) {
  CWInfo_FieldNumber_Date = 1,
  CWInfo_FieldNumber_Type = 2,
  CWInfo_FieldNumber_V01 = 3,
  CWInfo_FieldNumber_V02 = 4,
  CWInfo_FieldNumber_V03 = 5,
  CWInfo_FieldNumber_V04 = 6,
};

GPB_FINAL @interface CWInfo : GPBMessage

/** 日期 */
@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite) uint32_t type;

@property(nonatomic, readwrite) double v01;

@property(nonatomic, readwrite) double v02;

@property(nonatomic, readwrite) double v03;

@property(nonatomic, readwrite) double v04;

@end

#pragma mark - BaseCWInfo

typedef GPB_ENUM(BaseCWInfo_FieldNumber) {
  BaseCWInfo_FieldNumber_Code = 1,
  BaseCWInfo_FieldNumber_Yield = 2,
  BaseCWInfo_FieldNumber_ActiveCapital = 3,
  BaseCWInfo_FieldNumber_GrossCapital = 4,
  BaseCWInfo_FieldNumber_Shzt = 5,
  BaseCWInfo_FieldNumber_Startrq = 6,
  BaseCWInfo_FieldNumber_Gxrq = 7,
  BaseCWInfo_FieldNumber_Lastrq = 8,
  BaseCWInfo_FieldNumber_Fxj = 9,
  BaseCWInfo_FieldNumber_Tsspj = 10,
  BaseCWInfo_FieldNumber_Yycb = 11,
  BaseCWInfo_FieldNumber_Zgb = 12,
  BaseCWInfo_FieldNumber_Gjg = 13,
  BaseCWInfo_FieldNumber_Fqrfrg = 14,
  BaseCWInfo_FieldNumber_Frg = 15,
  BaseCWInfo_FieldNumber_Bg = 16,
  BaseCWInfo_FieldNumber_Hg = 17,
  BaseCWInfo_FieldNumber_Zgg = 18,
  BaseCWInfo_FieldNumber_Zzc = 19,
  BaseCWInfo_FieldNumber_Ldzc = 20,
  BaseCWInfo_FieldNumber_Gdzc = 21,
  BaseCWInfo_FieldNumber_Wxzc = 22,
  BaseCWInfo_FieldNumber_Cqtz = 23,
  BaseCWInfo_FieldNumber_Ldfz = 24,
  BaseCWInfo_FieldNumber_Cqfz = 25,
  BaseCWInfo_FieldNumber_Zbgjj = 26,
  BaseCWInfo_FieldNumber_Jzc = 27,
  BaseCWInfo_FieldNumber_Zysy = 28,
  BaseCWInfo_FieldNumber_Zyly = 29,
  BaseCWInfo_FieldNumber_Qtly = 30,
  BaseCWInfo_FieldNumber_Yyly = 31,
  BaseCWInfo_FieldNumber_Tzsy = 32,
  BaseCWInfo_FieldNumber_Btsy = 33,
  BaseCWInfo_FieldNumber_Yywsz = 34,
  BaseCWInfo_FieldNumber_Snsytz = 35,
  BaseCWInfo_FieldNumber_Lyze = 36,
  BaseCWInfo_FieldNumber_Shly = 37,
  BaseCWInfo_FieldNumber_Jly = 38,
  BaseCWInfo_FieldNumber_Wfply = 39,
  BaseCWInfo_FieldNumber_Tzmgjz = 40,
  BaseCWInfo_FieldNumber_HalfYearFlag = 41,
  BaseCWInfo_FieldNumber_Prov = 42,
  BaseCWInfo_FieldNumber_Hy = 43,
  BaseCWInfo_FieldNumber_Provstr = 44,
  BaseCWInfo_FieldNumber_Hangye = 45,
  BaseCWInfo_FieldNumber_Srkpj = 46,
  BaseCWInfo_FieldNumber_Start = 47,
};

/**
 * *
 * \@brief 基本财务数据结构（需与客户端统一）
 **/
GPB_FINAL @interface BaseCWInfo : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 保留 */
@property(nonatomic, readwrite) double yield;

/** 流通股本 */
@property(nonatomic, readwrite) double activeCapital;

/** 总股本 */
@property(nonatomic, readwrite) double grossCapital;

/** 上市状态 */
@property(nonatomic, readwrite) uint32_t shzt;

/** 上市日期 */
@property(nonatomic, readwrite) uint32_t startrq;

/** 更新日期 */
@property(nonatomic, readwrite) uint32_t gxrq;

/** 退市日期 */
@property(nonatomic, readwrite) uint32_t lastrq;

/** 发行价 */
@property(nonatomic, readwrite) double fxj;

/** 退市收盘价 */
@property(nonatomic, readwrite) double tsspj;

/** 营业总成本 */
@property(nonatomic, readwrite) double yycb;

/** 总股本 */
@property(nonatomic, readwrite) double zgb;

/** 国家股 */
@property(nonatomic, readwrite) double gjg;

/** 发起人法人股 */
@property(nonatomic, readwrite) double fqrfrg;

/** 法人股 */
@property(nonatomic, readwrite) double frg;

/** B股 */
@property(nonatomic, readwrite) double bg;

/** H股 */
@property(nonatomic, readwrite) double hg;

/** 职工股 */
@property(nonatomic, readwrite) double zgg;

/** 总资产(千元) */
@property(nonatomic, readwrite) double zzc;

/** 流动资产 */
@property(nonatomic, readwrite) double ldzc;

/** 固定资产 */
@property(nonatomic, readwrite) double gdzc;

/** 无形资产 */
@property(nonatomic, readwrite) double wxzc;

/** 长期投资 */
@property(nonatomic, readwrite) double cqtz;

/** 流动负债 */
@property(nonatomic, readwrite) double ldfz;

/** 长期负债 */
@property(nonatomic, readwrite) double cqfz;

/** 资本公积金 */
@property(nonatomic, readwrite) double zbgjj;

/** 股东权益(就是净资产) */
@property(nonatomic, readwrite) double jzc;

/** 主营总收入 */
@property(nonatomic, readwrite) double zysy;

/** 主营利益（实际为营业成本数据） */
@property(nonatomic, readwrite) double zyly;

/** 其它利益 */
@property(nonatomic, readwrite) double qtly;

/** 营业利益 */
@property(nonatomic, readwrite) double yyly;

/** 投资收益 */
@property(nonatomic, readwrite) double tzsy;

/** 补贴收入 */
@property(nonatomic, readwrite) double btsy;

/** 营业外收支 */
@property(nonatomic, readwrite) double yywsz;

/** 上年损益调整 */
@property(nonatomic, readwrite) double snsytz;

/** 利益总额 */
@property(nonatomic, readwrite) double lyze;

/** 税后利益 */
@property(nonatomic, readwrite) double shly;

/** 净利益 */
@property(nonatomic, readwrite) double jly;

/** 未分配利益 */
@property(nonatomic, readwrite) double wfply;

/** 调整每股净资产 物理意义:  净资产/调整后的总股本 */
@property(nonatomic, readwrite) double tzmgjz;

/** 全部更改为以月为单位 */
@property(nonatomic, readwrite) double halfYearFlag;

/** 所属省份 */
@property(nonatomic, readwrite) uint32_t prov;

/** 所属行业 */
@property(nonatomic, readwrite) uint32_t hy;

/** 所属省份—新版 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *provstr;

/** 所属行业—新版 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hangye;

/** 首日开盘价        -pt  2017.11.3  14:30 */
@property(nonatomic, readwrite) double srkpj;

/** 开市时间 */
@property(nonatomic, readwrite) uint64_t start;

@end

#pragma mark - autogbbq_req

typedef GPB_ENUM(autogbbq_req_FieldNumber) {
  autogbbq_req_FieldNumber_CodesArray = 1,
};

/**
 * AUTOGBBQ_REQ                = 22;        //请求股本除权数据
 **/
GPB_FINAL @interface autogbbq_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<tagCodeWithNkey*> *codesArray;
/** The number of items in @c codesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger codesArray_Count;

@end

#pragma mark - autogbbq_ans

typedef GPB_ENUM(autogbbq_ans_FieldNumber) {
  autogbbq_ans_FieldNumber_CqcxArray = 1,
};

GPB_FINAL @interface autogbbq_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CqcxCWInfo*> *cqcxArray;
/** The number of items in @c cqcxArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cqcxArray_Count;

@end

#pragma mark - autobase_req

typedef GPB_ENUM(autobase_req_FieldNumber) {
  autobase_req_FieldNumber_CodesArray = 1,
};

/**
 * AUTOBASE_REQ                = 23;        //请求财务数据
 **/
GPB_FINAL @interface autobase_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<tagCodeWithNkey*> *codesArray;
/** The number of items in @c codesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger codesArray_Count;

@end

#pragma mark - autobase_ans

typedef GPB_ENUM(autobase_ans_FieldNumber) {
  autobase_ans_FieldNumber_BasepArray = 1,
};

GPB_FINAL @interface autobase_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<BaseCWInfo*> *basepArray;
/** The number of items in @c basepArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger basepArray_Count;

@end

#pragma mark - hostmore_req

typedef GPB_ENUM(hostmore_req_FieldNumber) {
  hostmore_req_FieldNumber_Setcode = 1,
  hostmore_req_FieldNumber_Verflag = 2,
};

/**
 * HOSTMORE_REQ                = 31;        //主站信息，主要包括每个市场的开盘时间，股票数量等
 **/
GPB_FINAL @interface hostmore_req : GPBMessage

/** 市场分开检测 */
@property(nonatomic, readwrite) int32_t setcode;

@property(nonatomic, readwrite) uint32_t verflag;

@end

#pragma mark - hostmore_info

typedef GPB_ENUM(hostmore_info_FieldNumber) {
  hostmore_info_FieldNumber_Errflag = 1,
  hostmore_info_FieldNumber_Setcode = 2,
  hostmore_info_FieldNumber_EpochTime = 3,
  hostmore_info_FieldNumber_DaYear = 4,
  hostmore_info_FieldNumber_DaDay = 5,
  hostmore_info_FieldNumber_DaMon = 6,
  hostmore_info_FieldNumber_TiMin = 7,
  hostmore_info_FieldNumber_TiHour = 8,
  hostmore_info_FieldNumber_TiHund = 9,
  hostmore_info_FieldNumber_TiSec = 10,
  hostmore_info_FieldNumber_CommonArray = 11,
  hostmore_info_FieldNumber_QtArray = 12,
  hostmore_info_FieldNumber_Byesterday = 13,
  hostmore_info_FieldNumber_Codelisthash = 14,
  hostmore_info_FieldNumber_Infcodedate = 15,
  hostmore_info_FieldNumber_Infcodehms = 16,
  hostmore_info_FieldNumber_Bserv1 = 17,
  hostmore_info_FieldNumber_Bserv2 = 18,
  hostmore_info_FieldNumber_Bserv3 = 19,
  hostmore_info_FieldNumber_NUrgentNum = 20,
  hostmore_info_FieldNumber_Linuxcheck = 21,
  hostmore_info_FieldNumber_Bbigjbm = 22,
  hostmore_info_FieldNumber_B5Mmp = 23,
  hostmore_info_FieldNumber_Bcanuserurgent = 24,
  hostmore_info_FieldNumber_HasBakHostFile = 25,
  hostmore_info_FieldNumber_Webpage = 26,
  hostmore_info_FieldNumber_HostnameArray = 27,
  hostmore_info_FieldNumber_ByesterdaysArray = 28,
  hostmore_info_FieldNumber_OtherArray = 29,
};

GPB_FINAL @interface hostmore_info : GPBMessage

/** errflag为0表示可用，其它则表示有错 */
@property(nonatomic, readwrite) uint32_t errflag;

@property(nonatomic, readwrite) int32_t setcode;

/** 1970以来的时间（纳秒） */
@property(nonatomic, readwrite) uint64_t epochTime;

/** Year - 1980 */
@property(nonatomic, readwrite) uint32_t daYear;

/** Day of the month */
@property(nonatomic, readwrite) uint32_t daDay;

/** Month (1 = Jan) */
@property(nonatomic, readwrite) uint32_t daMon;

/** Minutes */
@property(nonatomic, readwrite) uint32_t tiMin;

/** Hours */
@property(nonatomic, readwrite) uint32_t tiHour;

/** Hundredths of seconds */
@property(nonatomic, readwrite) uint32_t tiHund;

/** Seconds */
@property(nonatomic, readwrite) uint32_t tiSec;

/** 市场共性的开盘时间 */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *commonArray;
/** The number of items in @c commonArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger commonArray_Count;

/** 其他信息（下标0中存放股票数量） */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *qtArray;
/** The number of items in @c qtArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger qtArray_Count;

@property(nonatomic, readwrite) uint32_t byesterday;

@property(nonatomic, readwrite) uint64_t codelisthash;

@property(nonatomic, readwrite) uint32_t infcodedate;

@property(nonatomic, readwrite) uint32_t infcodehms;

@property(nonatomic, readwrite) uint32_t bserv1;

@property(nonatomic, readwrite) uint32_t bserv2;

@property(nonatomic, readwrite) uint32_t bserv3;

@property(nonatomic, readwrite) uint32_t nUrgentNum;

@property(nonatomic, readwrite) uint32_t linuxcheck;

@property(nonatomic, readwrite) uint32_t bbigjbm;

@property(nonatomic, readwrite) uint32_t b5Mmp;

@property(nonatomic, readwrite) uint32_t bcanuserurgent;

@property(nonatomic, readwrite) uint32_t hasBakHostFile;

@property(nonatomic, readwrite) uint32_t webpage;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *hostnameArray;
/** The number of items in @c hostnameArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hostnameArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *byesterdaysArray;
/** The number of items in @c byesterdaysArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger byesterdaysArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *otherArray;
/** The number of items in @c otherArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger otherArray_Count;

@end

#pragma mark - hostmore_ans

typedef GPB_ENUM(hostmore_ans_FieldNumber) {
  hostmore_ans_FieldNumber_HostsArray = 1,
};

GPB_FINAL @interface hostmore_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<hostmore_info*> *hostsArray;
/** The number of items in @c hostsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hostsArray_Count;

@end

#pragma mark - sub_unsub_hq_req

typedef GPB_ENUM(sub_unsub_hq_req_FieldNumber) {
  sub_unsub_hq_req_FieldNumber_AKeyArray = 1,
};

/**
 * PUSH_HQ_SUB                = 134;        //TCP行情推送订阅请求，成功后直接返回1728协议应答
 * PUSH_HQ_UNSUB                = 135;        //TCP行情推送取消订阅请求
 * 订阅行情请求
 **/
GPB_FINAL @interface sub_unsub_hq_req : GPBMessage

/** 订阅几个品种; -1 表示取消全部订阅 */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *aKeyArray;
/** The number of items in @c aKeyArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger aKeyArray_Count;

@end

#pragma mark - unsub_hq_ans

typedef GPB_ENUM(unsub_hq_ans_FieldNumber) {
  unsub_hq_ans_FieldNumber_Subnum = 1,
};

GPB_FINAL @interface unsub_hq_ans : GPBMessage

/** 剩余订阅数量 */
@property(nonatomic, readwrite) uint32_t subnum;

@end

#pragma mark - str_unsub_hq_req

typedef GPB_ENUM(str_unsub_hq_req_FieldNumber) {
  str_unsub_hq_req_FieldNumber_AKeyArray = 1,
};

GPB_FINAL @interface str_unsub_hq_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *aKeyArray;
/** The number of items in @c aKeyArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger aKeyArray_Count;

@end

#pragma mark - stknum_req

typedef GPB_ENUM(stknum_req_FieldNumber) {
  stknum_req_FieldNumber_Setcode = 1,
  stknum_req_FieldNumber_Rq = 2,
};

GPB_FINAL @interface stknum_req : GPBMessage

@property(nonatomic, readwrite) int32_t setcode;

@property(nonatomic, readwrite) uint32_t rq;

@end

#pragma mark - stknum_ans

typedef GPB_ENUM(stknum_ans_FieldNumber) {
  stknum_ans_FieldNumber_Stknum = 1,
};

GPB_FINAL @interface stknum_ans : GPBMessage

@property(nonatomic, readwrite) uint32_t stknum;

@end

#pragma mark - StkInfoNew

typedef GPB_ENUM(StkInfoNew_FieldNumber) {
  StkInfoNew_FieldNumber_Nkey = 1,
  StkInfoNew_FieldNumber_Setcode = 2,
  StkInfoNew_FieldNumber_Code = 3,
  StkInfoNew_FieldNumber_Name = 4,
  StkInfoNew_FieldNumber_Unit = 5,
  StkInfoNew_FieldNumber_VolBase = 6,
  StkInfoNew_FieldNumber_Precise = 7,
  StkInfoNew_FieldNumber_Main = 8,
  StkInfoNew_FieldNumber_Close = 9,
  StkInfoNew_FieldNumber_Settle = 10,
  StkInfoNew_FieldNumber_Tick = 11,
  StkInfoNew_FieldNumber_NFzArray = 12,
  StkInfoNew_FieldNumber_OpenDate = 13,
  StkInfoNew_FieldNumber_BaseFreshCount = 14,
  StkInfoNew_FieldNumber_GbbqFreshCount = 15,
  StkInfoNew_FieldNumber_EnglishName = 16,
  StkInfoNew_FieldNumber_EnglishAbbr = 17,
  StkInfoNew_FieldNumber_TypeOfStockArray = 18,
};

GPB_FINAL @interface StkInfoNew : GPBMessage

/** 品种内部编码,如果提供内部编码，优先识别内部编码，code不用设置；如果不用内部编码，要设置为0 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite) int32_t setcode;

/** 证券代码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *code;

/** 证券名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 交易单位 */
@property(nonatomic, readwrite) double unit;

/** 量比的基量 */
@property(nonatomic, readwrite) double volBase;

/** 停牌 */
@property(nonatomic, readwrite) uint32_t precise;

/** 是否主力合约 */
@property(nonatomic, readwrite) uint32_t main;

/** 昨收 */
@property(nonatomic, readwrite) double close;

/** 昨结 */
@property(nonatomic, readwrite) double settle;

/** 最小变动价 */
@property(nonatomic, readwrite) double tick;

/** 开收盘时间段 */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *nFzArray;
/** The number of items in @c nFzArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger nFzArray_Count;

/** 代码链生成日期 */
@property(nonatomic, readwrite) uint32_t openDate;

/** 基本资料的更新次新 */
@property(nonatomic, readwrite) uint32_t baseFreshCount;

/** 股本变迁的更新次新 */
@property(nonatomic, readwrite) uint32_t gbbqFreshCount;

/** 证券英文名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *englishName;

/** 证券英文简称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *englishAbbr;

/** 股票分类信息 */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *typeOfStockArray;
/** The number of items in @c typeOfStockArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger typeOfStockArray_Count;

@end

#pragma mark - code_req

typedef GPB_ENUM(code_req_FieldNumber) {
  code_req_FieldNumber_Setcode = 1,
  code_req_FieldNumber_Startxh = 2,
};

GPB_FINAL @interface code_req : GPBMessage

@property(nonatomic, readwrite) int32_t setcode;

@property(nonatomic, readwrite) uint32_t startxh;

@end

#pragma mark - code_ans

typedef GPB_ENUM(code_ans_FieldNumber) {
  code_ans_FieldNumber_CodeArray = 1,
};

GPB_FINAL @interface code_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<StkInfoNew*> *codeArray;
/** The number of items in @c codeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger codeArray_Count;

@end

#pragma mark - zhsort_item

typedef GPB_ENUM(zhsort_item_FieldNumber) {
  zhsort_item_FieldNumber_Code = 1,
  zhsort_item_FieldNumber_ValArray = 2,
};

/**
 * ZHSORT_REQ                = 1205;        //综合排名数据
 **/
GPB_FINAL @interface zhsort_item : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *valArray;
/** The number of items in @c valArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger valArray_Count;

@end

#pragma mark - zhsort_req

typedef GPB_ENUM(zhsort_req_FieldNumber) {
  zhsort_req_FieldNumber_Domain = 1,
  zhsort_req_FieldNumber_Num = 2,
};

GPB_FINAL @interface zhsort_req : GPBMessage

@property(nonatomic, readwrite) uint32_t domain;

@property(nonatomic, readwrite) uint32_t num;

@end

#pragma mark - zhsort_ans

typedef GPB_ENUM(zhsort_ans_FieldNumber) {
  zhsort_ans_FieldNumber_ResultArray = 1,
};

GPB_FINAL @interface zhsort_ans : GPBMessage

/** num*9 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<zhsort_item*> *resultArray;
/** The number of items in @c resultArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resultArray_Count;

@end

#pragma mark - fjb_req

typedef GPB_ENUM(fjb_req_FieldNumber) {
  fjb_req_FieldNumber_Code = 1,
};

/**
 * FJB_REQ                    = 1365;        //分价表
 **/
GPB_FINAL @interface fjb_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@end

#pragma mark - fjb_ans

typedef GPB_ENUM(fjb_ans_FieldNumber) {
  fjb_ans_FieldNumber_Hq = 1,
  fjb_ans_FieldNumber_FjbArray = 2,
};

GPB_FINAL @interface fjb_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) CurrStockDataBEx *hq;
/** Test to see if @c hq has been set. */
@property(nonatomic, readwrite) BOOL hasHq;

/** uint8_t diffdata[0];        //CurrStockDataBEx+PriceVolTable[N] */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PriceVolTable*> *fjbArray;
/** The number of items in @c fjbArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fjbArray_Count;

@end

#pragma mark - analy_range_req

typedef GPB_ENUM(analy_range_req_FieldNumber) {
  analy_range_req_FieldNumber_Code = 1,
  analy_range_req_FieldNumber_Linetype = 2,
  analy_range_req_FieldNumber_Start = 3,
  analy_range_req_FieldNumber_End = 4,
};

/**
 * ANALY_RANGE_REQ            = 1367;        //按时间段请求原始K线数据
 **/
GPB_FINAL @interface analy_range_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t linetype;

/** 起始时间 */
@property(nonatomic, readwrite) uint64_t start;

/** 结束时间 */
@property(nonatomic, readwrite) uint64_t end;

@end

#pragma mark - analy_range_ans

typedef GPB_ENUM(analy_range_ans_FieldNumber) {
  analy_range_ans_FieldNumber_Req = 1,
  analy_range_ans_FieldNumber_Status = 2,
  analy_range_ans_FieldNumber_AkArray = 3,
};

GPB_FINAL @interface analy_range_ans : GPBMessage

/** 原样返回请求的信息，方便客户端查下 */
@property(nonatomic, readwrite, strong, null_resettable) analy_range_req *req;
/** Test to see if @c req has been set. */
@property(nonatomic, readwrite) BOOL hasReq;

/** -1:表示数据超过800个，需要客户端分批请求（用最后一根k线的年月日作为起始时间，继续请求）  0：正常 */
@property(nonatomic, readwrite) uint32_t status;

/** AnalyData[N] */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<AnalyDataB*> *akArray;
/** The number of items in @c akArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger akArray_Count;

@end

#pragma mark - analy_offset_req

typedef GPB_ENUM(analy_offset_req_FieldNumber) {
  analy_offset_req_FieldNumber_Code = 1,
  analy_offset_req_FieldNumber_Period = 2,
  analy_offset_req_FieldNumber_Offset = 3,
  analy_offset_req_FieldNumber_Num = 4,
  analy_offset_req_FieldNumber_Mulnum = 5,
};

/**
 * ANALY_OFFSET_REQ
 **/
GPB_FINAL @interface analy_offset_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t period;

@property(nonatomic, readwrite) uint32_t offset;

@property(nonatomic, readwrite) uint32_t num;

@property(nonatomic, readwrite) uint32_t mulnum;

@end

#pragma mark - analy_offset_ans

typedef GPB_ENUM(analy_offset_ans_FieldNumber) {
  analy_offset_ans_FieldNumber_Nkey = 1,
  analy_offset_ans_FieldNumber_AKArray = 2,
};

GPB_FINAL @interface analy_offset_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<AnalyDataB*> *aKArray;
/** The number of items in @c aKArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger aKArray_Count;

@end

#pragma mark - minute_req

typedef GPB_ENUM(minute_req_FieldNumber) {
  minute_req_FieldNumber_Code = 1,
  minute_req_FieldNumber_Days = 2,
};

/**
 * MINUTE_REQ                = 1369;        //1-10日分时走势数据
 **/
GPB_FINAL @interface minute_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t days;

@end

#pragma mark - minute_ans

typedef GPB_ENUM(minute_ans_FieldNumber) {
  minute_ans_FieldNumber_Count = 1,
  minute_ans_FieldNumber_Close = 2,
  minute_ans_FieldNumber_Hq = 3,
  minute_ans_FieldNumber_MinuteArray = 4,
};

GPB_FINAL @interface minute_ans : GPBMessage

@property(nonatomic, readwrite) uint32_t count;

@property(nonatomic, readwrite) double close;

@property(nonatomic, readwrite, strong, null_resettable) CurrStockDataBEx *hq;
/** Test to see if @c hq has been set. */
@property(nonatomic, readwrite) BOOL hasHq;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MinuteInfo*> *minuteArray;
/** The number of items in @c minuteArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger minuteArray_Count;

@end

#pragma mark - analy_tq_req

typedef GPB_ENUM(analy_tq_req_FieldNumber) {
  analy_tq_req_FieldNumber_Code = 1,
  analy_tq_req_FieldNumber_Period = 2,
  analy_tq_req_FieldNumber_Offset = 3,
  analy_tq_req_FieldNumber_Num = 4,
  analy_tq_req_FieldNumber_Mulnum = 5,
};

/**
 * ANALY_TQ_REQ                = 1370;        //复权K线数据
 **/
GPB_FINAL @interface analy_tq_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t period;

@property(nonatomic, readwrite) uint32_t offset;

@property(nonatomic, readwrite) uint32_t num;

@property(nonatomic, readwrite) uint32_t mulnum;

@end

#pragma mark - analy_tq_ans

typedef GPB_ENUM(analy_tq_ans_FieldNumber) {
  analy_tq_ans_FieldNumber_Nkey = 1,
  analy_tq_ans_FieldNumber_Num = 2,
  analy_tq_ans_FieldNumber_AKArray = 3,
};

GPB_FINAL @interface analy_tq_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

/** 实际第一维度个数 */
@property(nonatomic, readwrite) uint32_t num;

/** AnalyData[N]*3 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<AnalyDataB*> *aKArray;
/** The number of items in @c aKArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger aKArray_Count;

@end

#pragma mark - sort_hq_req

typedef GPB_ENUM(sort_hq_req_FieldNumber) {
  sort_hq_req_FieldNumber_SetDomain = 1,
  sort_hq_req_FieldNumber_Coltype = 2,
  sort_hq_req_FieldNumber_Startxh = 3,
  sort_hq_req_FieldNumber_Wantnum = 4,
  sort_hq_req_FieldNumber_Sorttype = 5,
};

/**
 * SORT_HQ_REQ                = 1727;        //请求分类排序行情
 * 应答采用  multi_hq_ans
 **/
GPB_FINAL @interface sort_hq_req : GPBMessage

@property(nonatomic, readwrite) uint32_t setDomain;

@property(nonatomic, readwrite) uint32_t coltype;

@property(nonatomic, readwrite) uint32_t startxh;

@property(nonatomic, readwrite) uint32_t wantnum;

@property(nonatomic, readwrite) uint32_t sorttype;

@end

#pragma mark - multi_hq_req

typedef GPB_ENUM(multi_hq_req_FieldNumber) {
  multi_hq_req_FieldNumber_CodesArray = 1,
};

/**
 * MULTI_HQ_REQ                = 1728;        //请求指定若干品种行情
 **/
GPB_FINAL @interface multi_hq_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<tagCodeWithNkey*> *codesArray;
/** The number of items in @c codesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger codesArray_Count;

@end

#pragma mark - multi_hq_ans

typedef GPB_ENUM(multi_hq_ans_FieldNumber) {
  multi_hq_ans_FieldNumber_AhqArray = 1,
};

GPB_FINAL @interface multi_hq_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CurrStockDataBEx*> *ahqArray;
/** The number of items in @c ahqArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger ahqArray_Count;

@end

#pragma mark - multi_ex_hq_req

typedef GPB_ENUM(multi_ex_hq_req_FieldNumber) {
  multi_ex_hq_req_FieldNumber_Num = 1,
  multi_ex_hq_req_FieldNumber_Fieldnum = 2,
  multi_ex_hq_req_FieldNumber_CodesArray = 3,
};

/**
 * MULTI_EX_HQ_REQ            = 1729;        //请求指定若干品种行情（支持额外扩展字段）
 **/
GPB_FINAL @interface multi_ex_hq_req : GPBMessage

@property(nonatomic, readwrite) uint32_t num;

@property(nonatomic, readwrite) uint32_t fieldnum;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<tagCodeWithNkey*> *codesArray;
/** The number of items in @c codesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger codesArray_Count;

@end

#pragma mark - multi_ex_hq_ans

typedef GPB_ENUM(multi_ex_hq_ans_FieldNumber) {
  multi_ex_hq_ans_FieldNumber_Total = 1,
  multi_ex_hq_ans_FieldNumber_Count = 2,
  multi_ex_hq_ans_FieldNumber_ExLen = 3,
  multi_ex_hq_ans_FieldNumber_DataArray = 4,
  multi_ex_hq_ans_FieldNumber_ExdataArray = 5,
};

GPB_FINAL @interface multi_ex_hq_ans : GPBMessage

@property(nonatomic, readwrite) uint32_t total;

@property(nonatomic, readwrite) uint32_t count;

/** 行情+扩展字段总长度 */
@property(nonatomic, readwrite) uint32_t exLen;

/** CurrStockDataBEx[N]; */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CurrStockDataBEx*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

/** 二进制扩展字段数据 */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *exdataArray;
/** The number of items in @c exdataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger exdataArray_Count;

@end

#pragma mark - full_mmp_req

typedef GPB_ENUM(full_mmp_req_FieldNumber) {
  full_mmp_req_FieldNumber_Code = 1,
};

/**
 * FULL_MMP_REQ                = 1730;        //全档买卖盘口
 **/
GPB_FINAL @interface full_mmp_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@end

#pragma mark - full_mmp_ans

typedef GPB_ENUM(full_mmp_ans_FieldNumber) {
  full_mmp_ans_FieldNumber_Nkey = 1,
  full_mmp_ans_FieldNumber_BuyNum = 2,
  full_mmp_ans_FieldNumber_SellNum = 3,
  full_mmp_ans_FieldNumber_DataArray = 4,
};

GPB_FINAL @interface full_mmp_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

/** 买盘数量 */
@property(nonatomic, readwrite) uint32_t buyNum;

/** 卖盘数量 */
@property(nonatomic, readwrite) uint32_t sellNum;

/** 先买盘1档 2档 ... N档 再卖盘1档 2档 ... N档 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PKData*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

@end

#pragma mark - lv2tick_req

typedef GPB_ENUM(lv2tick_req_FieldNumber) {
  lv2tick_req_FieldNumber_Code = 1,
  lv2tick_req_FieldNumber_Offset = 2,
  lv2tick_req_FieldNumber_Num = 3,
};

/**
 * L2_TICK_REQ                = 1732;        //逐笔成交明细
 **/
GPB_FINAL @interface lv2tick_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 请求起始偏移位置 */
@property(nonatomic, readwrite) uint32_t offset;

@property(nonatomic, readwrite) uint32_t num;

@end

#pragma mark - lv2tick_ans

typedef GPB_ENUM(lv2tick_ans_FieldNumber) {
  lv2tick_ans_FieldNumber_Nkey = 1,
  lv2tick_ans_FieldNumber_DataArray = 2,
};

GPB_FINAL @interface lv2tick_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TickInfo*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

@end

#pragma mark - sort_code_req

typedef GPB_ENUM(sort_code_req_FieldNumber) {
  sort_code_req_FieldNumber_SetDomain = 1,
  sort_code_req_FieldNumber_Coltype = 2,
  sort_code_req_FieldNumber_Sorttype = 3,
};

/**
 * SORT_CODE_REQ                = 1734;        //请求全部排序代码
 **/
GPB_FINAL @interface sort_code_req : GPBMessage

@property(nonatomic, readwrite) uint32_t setDomain;

@property(nonatomic, readwrite) uint32_t coltype;

@property(nonatomic, readwrite) uint32_t sorttype;

@end

#pragma mark - sort_code_ans

typedef GPB_ENUM(sort_code_ans_FieldNumber) {
  sort_code_ans_FieldNumber_NkeysArray = 1,
};

GPB_FINAL @interface sort_code_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *nkeysArray;
/** The number of items in @c nkeysArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger nkeysArray_Count;

@end

#pragma mark - mmp_tick_req

typedef GPB_ENUM(mmp_tick_req_FieldNumber) {
  mmp_tick_req_FieldNumber_Code = 1,
  mmp_tick_req_FieldNumber_Price = 2,
  mmp_tick_req_FieldNumber_Bs = 3,
};

/**
 * MMP_TICK_REQ                = 1735;        //买卖盘口委托队列
 **/
GPB_FINAL @interface mmp_tick_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 价格 */
@property(nonatomic, readwrite) double price;

@property(nonatomic, readwrite) uint32_t bs;

@end

#pragma mark - mmp_tick_ans

typedef GPB_ENUM(mmp_tick_ans_FieldNumber) {
  mmp_tick_ans_FieldNumber_Nkey = 1,
  mmp_tick_ans_FieldNumber_VolumesArray = 2,
};

GPB_FINAL @interface mmp_tick_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *volumesArray;
/** The number of items in @c volumesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger volumesArray_Count;

@end

#pragma mark - block_sort_hq_req

typedef GPB_ENUM(block_sort_hq_req_FieldNumber) {
  block_sort_hq_req_FieldNumber_Code = 1,
  block_sort_hq_req_FieldNumber_Coltype = 2,
  block_sort_hq_req_FieldNumber_Startxh = 3,
  block_sort_hq_req_FieldNumber_Wantnum = 4,
  block_sort_hq_req_FieldNumber_Sorttype = 5,
  block_sort_hq_req_FieldNumber_Fieldnum = 6,
  block_sort_hq_req_FieldNumber_FieldidArray = 7,
};

/**
 * BLOCK_SORT_HQ_REQ            = 2008;        //板块成分股排序行情
 **/
GPB_FINAL @interface block_sort_hq_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t coltype;

@property(nonatomic, readwrite) uint32_t startxh;

@property(nonatomic, readwrite) uint32_t wantnum;

@property(nonatomic, readwrite) uint32_t sorttype;

@property(nonatomic, readwrite) uint32_t fieldnum;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldidArray;
/** The number of items in @c fieldidArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldidArray_Count;

@end

#pragma mark - block_sort_hq_ans

typedef GPB_ENUM(block_sort_hq_ans_FieldNumber) {
  block_sort_hq_ans_FieldNumber_Total = 1,
  block_sort_hq_ans_FieldNumber_Count = 2,
  block_sort_hq_ans_FieldNumber_ExLen = 3,
  block_sort_hq_ans_FieldNumber_AhqArray = 4,
  block_sort_hq_ans_FieldNumber_ExdataArray = 5,
};

GPB_FINAL @interface block_sort_hq_ans : GPBMessage

@property(nonatomic, readwrite) uint32_t total;

@property(nonatomic, readwrite) uint32_t count;

/** 行情+扩展字段总长度 */
@property(nonatomic, readwrite) uint32_t exLen;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CurrStockDataBEx*> *ahqArray;
/** The number of items in @c ahqArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger ahqArray_Count;

/** CurrStockDataBEx[N]+//二进制扩展字段数据 */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *exdataArray;
/** The number of items in @c exdataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger exdataArray_Count;

@end

#pragma mark - sort_ex_hq_req

typedef GPB_ENUM(sort_ex_hq_req_FieldNumber) {
  sort_ex_hq_req_FieldNumber_SetDomain = 1,
  sort_ex_hq_req_FieldNumber_Coltype = 2,
  sort_ex_hq_req_FieldNumber_Startxh = 3,
  sort_ex_hq_req_FieldNumber_Wantnum = 4,
  sort_ex_hq_req_FieldNumber_Sorttype = 5,
  sort_ex_hq_req_FieldNumber_Drate = 6,
  sort_ex_hq_req_FieldNumber_FieldidsArray = 7,
};

/**
 * SORT_EX_HQ_REQ            = 2015;        //请求分类排序行情（支持额外扩展字段）
 **/
GPB_FINAL @interface sort_ex_hq_req : GPBMessage

@property(nonatomic, readwrite) uint32_t setDomain;

@property(nonatomic, readwrite) uint32_t coltype;

@property(nonatomic, readwrite) uint32_t startxh;

@property(nonatomic, readwrite) uint32_t wantnum;

@property(nonatomic, readwrite) uint32_t sorttype;

@property(nonatomic, readwrite) uint32_t drate;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldidsArray;
/** The number of items in @c fieldidsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldidsArray_Count;

@end

#pragma mark - hq_with_fields

typedef GPB_ENUM(hq_with_fields_FieldNumber) {
  hq_with_fields_FieldNumber_Hq = 1,
  hq_with_fields_FieldNumber_ExdataArray = 2,
};

GPB_FINAL @interface hq_with_fields : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) CurrStockDataBEx *hq;
/** Test to see if @c hq has been set. */
@property(nonatomic, readwrite) BOOL hasHq;

/** 下面是具体的包体 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GPBAny*> *exdataArray;
/** The number of items in @c exdataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger exdataArray_Count;

@end

#pragma mark - sort_ex_hq_ans

typedef GPB_ENUM(sort_ex_hq_ans_FieldNumber) {
  sort_ex_hq_ans_FieldNumber_Total = 1,
  sort_ex_hq_ans_FieldNumber_Count = 2,
  sort_ex_hq_ans_FieldNumber_FieldidsArray = 3,
  sort_ex_hq_ans_FieldNumber_ExLen = 4,
  sort_ex_hq_ans_FieldNumber_FieldsArray = 5,
};

GPB_FINAL @interface sort_ex_hq_ans : GPBMessage

@property(nonatomic, readwrite) uint32_t total;

@property(nonatomic, readwrite) uint32_t count;

/** 直接告知客户端，避免重新查询ID */
@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldidsArray;
/** The number of items in @c fieldidsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldidsArray_Count;

/** 行情+扩展字段总长度 */
@property(nonatomic, readwrite) uint32_t exLen;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<hq_with_fields*> *fieldsArray;
/** The number of items in @c fieldsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldsArray_Count;

@end

#pragma mark - sort_block_hq_req

typedef GPB_ENUM(sort_block_hq_req_FieldNumber) {
  sort_block_hq_req_FieldNumber_Code = 1,
  sort_block_hq_req_FieldNumber_Coltype = 2,
  sort_block_hq_req_FieldNumber_Startxh = 3,
  sort_block_hq_req_FieldNumber_Wantnum = 4,
  sort_block_hq_req_FieldNumber_Sorttype = 5,
  sort_block_hq_req_FieldNumber_FieldidsArray = 6,
};

GPB_FINAL @interface sort_block_hq_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t coltype;

@property(nonatomic, readwrite) uint32_t startxh;

@property(nonatomic, readwrite) uint32_t wantnum;

@property(nonatomic, readwrite) uint32_t sorttype;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldidsArray;
/** The number of items in @c fieldidsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldidsArray_Count;

@end

#pragma mark - stock_block_fields

typedef GPB_ENUM(stock_block_fields_FieldNumber) {
  stock_block_fields_FieldNumber_Blocktype = 1,
  stock_block_fields_FieldNumber_Blockhq = 2,
  stock_block_fields_FieldNumber_Lzghq = 3,
};

GPB_FINAL @interface stock_block_fields : GPBMessage

@property(nonatomic, readwrite) uint32_t blocktype;

@property(nonatomic, readwrite, strong, null_resettable) CurrStockDataBEx *blockhq;
/** Test to see if @c blockhq has been set. */
@property(nonatomic, readwrite) BOOL hasBlockhq;

@property(nonatomic, readwrite, strong, null_resettable) CurrStockDataBEx *lzghq;
/** Test to see if @c lzghq has been set. */
@property(nonatomic, readwrite) BOOL hasLzghq;

@end

#pragma mark - sort_stock_block_ans

typedef GPB_ENUM(sort_stock_block_ans_FieldNumber) {
  sort_stock_block_ans_FieldNumber_FieldsArray = 1,
};

GPB_FINAL @interface sort_stock_block_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<stock_block_fields*> *fieldsArray;
/** The number of items in @c fieldsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldsArray_Count;

@end

#pragma mark - sort_shq_ex_req

typedef GPB_ENUM(sort_shq_ex_req_FieldNumber) {
  sort_shq_ex_req_FieldNumber_KeysArray = 1,
  sort_shq_ex_req_FieldNumber_FieldidsArray = 2,
};

GPB_FINAL @interface sort_shq_ex_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt64Array *keysArray;
/** The number of items in @c keysArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger keysArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldidsArray;
/** The number of items in @c fieldidsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldidsArray_Count;

@end

#pragma mark - his_minute_req

typedef GPB_ENUM(his_minute_req_FieldNumber) {
  his_minute_req_FieldNumber_Date = 1,
  his_minute_req_FieldNumber_Code = 2,
};

/**
 * HIS_MINUTE_REQ            = 4068;        //历史分时走势数据
 **/
GPB_FINAL @interface his_minute_req : GPBMessage

@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@end

#pragma mark - his_minute_ans

typedef GPB_ENUM(his_minute_ans_FieldNumber) {
  his_minute_ans_FieldNumber_Nkey = 1,
  his_minute_ans_FieldNumber_Close = 2,
  his_minute_ans_FieldNumber_MinutesArray = 3,
};

GPB_FINAL @interface his_minute_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite) double close;

/** MinuteInfo[N] */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<MinuteInfo*> *minutesArray;
/** The number of items in @c minutesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger minutesArray_Count;

@end

#pragma mark - tick_req

typedef GPB_ENUM(tick_req_FieldNumber) {
  tick_req_FieldNumber_Code = 1,
  tick_req_FieldNumber_Type = 2,
  tick_req_FieldNumber_Startxh = 3,
  tick_req_FieldNumber_Num = 4,
};

/**
 * TICK_REQ                    = 4069;        //Tick数据
 **/
GPB_FINAL @interface tick_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t type;

@property(nonatomic, readwrite) uint32_t startxh;

@property(nonatomic, readwrite) uint32_t num;

@end

#pragma mark - tick_ans

typedef GPB_ENUM(tick_ans_FieldNumber) {
  tick_ans_FieldNumber_Nkey = 1,
  tick_ans_FieldNumber_TicksArray = 2,
};

GPB_FINAL @interface tick_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

/** TickInfo[N] */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TickInfo*> *ticksArray;
/** The number of items in @c ticksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger ticksArray_Count;

@end

#pragma mark - his_tick_req

typedef GPB_ENUM(his_tick_req_FieldNumber) {
  his_tick_req_FieldNumber_Ldate = 1,
  his_tick_req_FieldNumber_Code = 2,
  his_tick_req_FieldNumber_Type = 3,
  his_tick_req_FieldNumber_Startxh = 4,
  his_tick_req_FieldNumber_Num = 5,
};

/**
 * HIS_TICK_REQ                = 4070;        //历史Tick数据
 **/
GPB_FINAL @interface his_tick_req : GPBMessage

@property(nonatomic, readwrite) uint32_t ldate;

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t type;

@property(nonatomic, readwrite) uint32_t startxh;

@property(nonatomic, readwrite) uint32_t num;

@end

#pragma mark - his_tick_ans

typedef GPB_ENUM(his_tick_ans_FieldNumber) {
  his_tick_ans_FieldNumber_Nkey = 1,
  his_tick_ans_FieldNumber_Close = 2,
  his_tick_ans_FieldNumber_TicksArray = 3,
};

GPB_FINAL @interface his_tick_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite) double close;

/** TickInfo[N] */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TickInfo*> *ticksArray;
/** The number of items in @c ticksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger ticksArray_Count;

@end

#pragma mark - gsResult

typedef GPB_ENUM(gsResult_FieldNumber) {
  gsResult_FieldNumber_GsName = 1,
  gsResult_FieldNumber_Count = 2,
  gsResult_FieldNumber_IsLast = 3,
};

/**
 * CLOUD_CALC_SORT_REQ        = 5013;        //公式云计算排序
 **/
GPB_FINAL @interface gsResult : GPBMessage

/** 公式名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *gsName;

/** 公式计算结果的数量 */
@property(nonatomic, readwrite) uint32_t count;

/** 最后公式 */
@property(nonatomic, readwrite) BOOL isLast;

@end

#pragma mark - cloudCalcResult

typedef GPB_ENUM(cloudCalcResult_FieldNumber) {
  cloudCalcResult_FieldNumber_Code = 1,
  cloudCalcResult_FieldNumber_CalcTime = 2,
  cloudCalcResult_FieldNumber_Close = 3,
  cloudCalcResult_FieldNumber_Now = 4,
  cloudCalcResult_FieldNumber_MaxZaf5Days = 5,
};

GPB_FINAL @interface cloudCalcResult : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 公式计算的时间 */
@property(nonatomic, readwrite) uint64_t calcTime;

/** 昨收 */
@property(nonatomic, readwrite) double close;

/** 现价 */
@property(nonatomic, readwrite) double now;

/** 5日最大涨幅 */
@property(nonatomic, readwrite) double maxZaf5Days;

@end

#pragma mark - cloud_calc_sort_req

typedef GPB_ENUM(cloud_calc_sort_req_FieldNumber) {
  cloud_calc_sort_req_FieldNumber_Date = 1,
};

GPB_FINAL @interface cloud_calc_sort_req : GPBMessage

@property(nonatomic, readwrite) uint32_t date;

@end

#pragma mark - cloud_calc_sort_ans

typedef GPB_ENUM(cloud_calc_sort_ans_FieldNumber) {
  cloud_calc_sort_ans_FieldNumber_Date = 1,
  cloud_calc_sort_ans_FieldNumber_GsInfoArray = 2,
  cloud_calc_sort_ans_FieldNumber_ResultArray = 3,
};

GPB_FINAL @interface cloud_calc_sort_ans : GPBMessage

/** 日期 */
@property(nonatomic, readwrite) uint32_t date;

/** 4个公式返回的信息，前3个公式为识庄公式，最后一个公式猎庄公式，具体合并方式由客户端处理 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<gsResult*> *gsInfoArray;
/** The number of items in @c gsInfoArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger gsInfoArray_Count;

/** 返回结果，四个公式计算的结果依次存入 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<cloudCalcResult*> *resultArray;
/** The number of items in @c resultArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resultArray_Count;

@end

#pragma mark - auctiondata_req

typedef GPB_ENUM(auctiondata_req_FieldNumber) {
  auctiondata_req_FieldNumber_Code = 1,
  auctiondata_req_FieldNumber_Type = 2,
};

/**
 * AUCTIONDATA_REQ            = 10029;    //集合竞价带未匹配量
 **/
GPB_FINAL @interface auctiondata_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 1:开盘集合竞价 4:尾盘集合竞价 */
@property(nonatomic, readwrite) uint32_t type;

@end

#pragma mark - auctiondata_ans

typedef GPB_ENUM(auctiondata_ans_FieldNumber) {
  auctiondata_ans_FieldNumber_Nkey = 1,
  auctiondata_ans_FieldNumber_TicksArray = 2,
};

GPB_FINAL @interface auctiondata_ans : GPBMessage

/** 品种内部编码 */
@property(nonatomic, readwrite) uint64_t nkey;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TickInfo*> *ticksArray;
/** The number of items in @c ticksArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger ticksArray_Count;

@end

#pragma mark - after_trade_req

typedef GPB_ENUM(after_trade_req_FieldNumber) {
  after_trade_req_FieldNumber_Code = 1,
};

/**
 * AFTER_TRADE_REQ            = 10032;    //获取盘后定价交易扩展数据
 **/
GPB_FINAL @interface after_trade_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@end

#pragma mark - after_trade_ans

typedef GPB_ENUM(after_trade_ans_FieldNumber) {
  after_trade_ans_FieldNumber_Data_p = 1,
};

GPB_FINAL @interface after_trade_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) CurrStockDataBEx *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - json_req_ans

typedef GPB_ENUM(json_req_ans_FieldNumber) {
  json_req_ans_FieldNumber_Json = 1,
};

/**
 * JSON_REQ                    = 30000;    //请求/应答内容为JSon格式的协议报文
 **/
GPB_FINAL @interface json_req_ans : GPBMessage

/** json请求/应答串  一定要0结束符 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *json;

@end

#pragma mark - StrategyCenterList_Req

typedef GPB_ENUM(StrategyCenterList_Req_FieldNumber) {
  StrategyCenterList_Req_FieldNumber_Typecode = 1,
  StrategyCenterList_Req_FieldNumber_Groupid = 2,
  StrategyCenterList_Req_FieldNumber_Code = 3,
  StrategyCenterList_Req_FieldNumber_Date = 4,
  StrategyCenterList_Req_FieldNumber_Maxnum = 5,
  StrategyCenterList_Req_FieldNumber_Offset = 6,
  StrategyCenterList_Req_FieldNumber_Num = 7,
  StrategyCenterList_Req_FieldNumber_Period = 8,
  StrategyCenterList_Req_FieldNumber_KeytypesArray = 9,
};

/**
 * 策略中心 获取列表
 * 共用请求包头
 * STRATEGYCENTER_LIST_REQ
 * STRATEGYONEKEY_REQ
 * SRV_STRATEGYPOOL_REQ
 * 策略中心共用包头，不同协议，填写不同的包头，不需要全部填满
 **/
GPB_FINAL @interface StrategyCenterList_Req : GPBMessage

/** ID   StrategyBS */
@property(nonatomic, readwrite, copy, null_resettable) NSString *typecode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *groupid;

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 日期 */
@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite) uint32_t maxnum;

@property(nonatomic, readwrite) uint32_t offset;

@property(nonatomic, readwrite) uint32_t num;

/** 0:全部 1:一周 2:一月 3:半年 4:一年 */
@property(nonatomic, readwrite) uint32_t period;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *keytypesArray;
/** The number of items in @c keytypesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger keytypesArray_Count;

@end

#pragma mark - StrategyGS_Result

typedef GPB_ENUM(StrategyGS_Result_FieldNumber) {
  StrategyGS_Result_FieldNumber_Date = 1,
  StrategyGS_Result_FieldNumber_ResultArray = 2,
};

GPB_FINAL @interface StrategyGS_Result : GPBMessage

@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *resultArray;
/** The number of items in @c resultArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resultArray_Count;

@end

#pragma mark - StrategyGS_AnsInfo

typedef GPB_ENUM(StrategyGS_AnsInfo_FieldNumber) {
  StrategyGS_AnsInfo_FieldNumber_FieldArray = 1,
};

GPB_FINAL @interface StrategyGS_AnsInfo : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<StrategyGS_Result*> *fieldArray;
/** The number of items in @c fieldArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldArray_Count;

@end

#pragma mark - CalcStatics_Agfd_AnsInfo

typedef GPB_ENUM(CalcStatics_Agfd_AnsInfo_FieldNumber) {
  CalcStatics_Agfd_AnsInfo_FieldNumber_FieldArray = 1,
  CalcStatics_Agfd_AnsInfo_FieldNumber_FieldshArray = 2,
  CalcStatics_Agfd_AnsInfo_FieldNumber_FieldszArray = 3,
  CalcStatics_Agfd_AnsInfo_FieldNumber_FieldcyArray = 4,
};

GPB_FINAL @interface CalcStatics_Agfd_AnsInfo : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldArray;
/** The number of items in @c fieldArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldshArray;
/** The number of items in @c fieldshArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldshArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldszArray;
/** The number of items in @c fieldszArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldszArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBUInt32Array *fieldcyArray;
/** The number of items in @c fieldcyArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldcyArray_Count;

@end

#pragma mark - StrategyBS_List_AnsInfo

typedef GPB_ENUM(StrategyBS_List_AnsInfo_FieldNumber) {
  StrategyBS_List_AnsInfo_FieldNumber_Groupid = 1,
  StrategyBS_List_AnsInfo_FieldNumber_Name = 2,
  StrategyBS_List_AnsInfo_FieldNumber_Outwin = 3,
  StrategyBS_List_AnsInfo_FieldNumber_Outlose = 4,
  StrategyBS_List_AnsInfo_FieldNumber_Profit = 5,
  StrategyBS_List_AnsInfo_FieldNumber_Dayzaf = 6,
  StrategyBS_List_AnsInfo_FieldNumber_Success = 7,
  StrategyBS_List_AnsInfo_FieldNumber_Date = 8,
  StrategyBS_List_AnsInfo_FieldNumber_Count = 9,
};

GPB_FINAL @interface StrategyBS_List_AnsInfo : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *groupid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 止盈 */
@property(nonatomic, readwrite) double outwin;

/** 止损 */
@property(nonatomic, readwrite) double outlose;

/** 策略涨幅 */
@property(nonatomic, readwrite) double profit;

/** 当日涨幅 */
@property(nonatomic, readwrite) double dayzaf;

/** 胜率 */
@property(nonatomic, readwrite) double success;

/** 日期 */
@property(nonatomic, readwrite) uint32_t date;

/** 入选只数 */
@property(nonatomic, readwrite) uint32_t count;

@end

#pragma mark - StrategyOnekey_Result

typedef GPB_ENUM(StrategyOnekey_Result_FieldNumber) {
  StrategyOnekey_Result_FieldNumber_Groupid = 1,
  StrategyOnekey_Result_FieldNumber_Name = 2,
  StrategyOnekey_Result_FieldNumber_Typecode = 3,
  StrategyOnekey_Result_FieldNumber_Profit = 4,
  StrategyOnekey_Result_FieldNumber_Up = 5,
  StrategyOnekey_Result_FieldNumber_Down = 6,
  StrategyOnekey_Result_FieldNumber_Total = 7,
  StrategyOnekey_Result_FieldNumber_Date = 8,
};

GPB_FINAL @interface StrategyOnekey_Result : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *groupid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *typecode;

/** 日收益 */
@property(nonatomic, readwrite) double profit;

/** 上涨数 */
@property(nonatomic, readwrite) uint32_t up;

/** 下跌数 */
@property(nonatomic, readwrite) uint32_t down;

/** 总数 */
@property(nonatomic, readwrite) uint32_t total;

/** 日期 */
@property(nonatomic, readwrite) uint32_t date;

@end

#pragma mark - StrategyOnekey_Profit

typedef GPB_ENUM(StrategyOnekey_Profit_FieldNumber) {
  StrategyOnekey_Profit_FieldNumber_Date = 1,
  StrategyOnekey_Profit_FieldNumber_Profit = 2,
};

GPB_FINAL @interface StrategyOnekey_Profit : GPBMessage

@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite) double profit;

@end

#pragma mark - StrategyBS_Profit

typedef GPB_ENUM(StrategyBS_Profit_FieldNumber) {
  StrategyBS_Profit_FieldNumber_Date = 1,
  StrategyBS_Profit_FieldNumber_Profit = 2,
  StrategyBS_Profit_FieldNumber_Zsprofit = 3,
};

GPB_FINAL @interface StrategyBS_Profit : GPBMessage

@property(nonatomic, readwrite) uint32_t date;

/** 收益 */
@property(nonatomic, readwrite) double profit;

/** 指数收益 */
@property(nonatomic, readwrite) double zsprofit;

@end

#pragma mark - StrategyBS_Result

typedef GPB_ENUM(StrategyBS_Result_FieldNumber) {
  StrategyBS_Result_FieldNumber_Avedays = 1,
  StrategyBS_Result_FieldNumber_Profit = 2,
  StrategyBS_Result_FieldNumber_Sucrate = 3,
};

GPB_FINAL @interface StrategyBS_Result : GPBMessage

/** 最高涨幅平均天数 */
@property(nonatomic, readwrite) uint32_t avedays;

/** 平均收益率 */
@property(nonatomic, readwrite) double profit;

/** 选股成功率 */
@property(nonatomic, readwrite) double sucrate;

@end

#pragma mark - StrategyBS_XG_Data

typedef GPB_ENUM(StrategyBS_XG_Data_FieldNumber) {
  StrategyBS_XG_Data_FieldNumber_Code = 1,
  StrategyBS_XG_Data_FieldNumber_BIn = 2,
  StrategyBS_XG_Data_FieldNumber_Dotime = 3,
  StrategyBS_XG_Data_FieldNumber_Price = 4,
  StrategyBS_XG_Data_FieldNumber_Maxprice = 5,
  StrategyBS_XG_Data_FieldNumber_Minprice = 6,
  StrategyBS_XG_Data_FieldNumber_Tqprice = 7,
  StrategyBS_XG_Data_FieldNumber_Outtime = 8,
  StrategyBS_XG_Data_FieldNumber_Outprice = 9,
  StrategyBS_XG_Data_FieldNumber_Zaf = 10,
  StrategyBS_XG_Data_FieldNumber_Inzaf = 11,
};

/**
 * 今日调仓
 * StrategyCenterList_Req  选择字段:
 * {
 *     string    groupid=1;
 *     uint32  date=2;
 * }
 * 策略选股今日调仓 20111    // 策略选股当前持仓 20112        // 策略选股策略牛股 20113
 * StrategyBS_Jrtc_Data    StrategyBS_Dqcc_Data    StrategyBS_Clng_Data
 * 合并数据: 没有的数据不填写
 **/
GPB_FINAL @interface StrategyBS_XG_Data : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** true：调入 false: 调出 */
@property(nonatomic, readwrite) uint32_t bIn;

/** 调入调出时间    intime */
@property(nonatomic, readwrite) uint64_t dotime;

/** 调入调出价格        inprice */
@property(nonatomic, readwrite) double price;

/** 止盈价 */
@property(nonatomic, readwrite) double maxprice;

/** 止损价 */
@property(nonatomic, readwrite) double minprice;

/** 调入价格到今天的前复权价格 */
@property(nonatomic, readwrite) double tqprice;

/** 调出时间 */
@property(nonatomic, readwrite) uint64_t outtime;

/** 调出价格 */
@property(nonatomic, readwrite) double outprice;

/** 涨幅 */
@property(nonatomic, readwrite) double zaf;

/** 次日涨幅 */
@property(nonatomic, readwrite) double inzaf;

@end

#pragma mark - StrategyPoolCxqnJhjjZtqd_List

typedef GPB_ENUM(StrategyPoolCxqnJhjjZtqd_List_FieldNumber) {
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_Code = 1,
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_Selecttime = 2,
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_Selectprice = 3,
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_Selectzaf = 4,
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_Fivedayszaf = 5,
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_FState = 6,
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_Days = 7,
  StrategyPoolCxqnJhjjZtqd_List_FieldNumber_Fex = 8,
};

/**
 * pool  次新擒牛，集合竞价 涨停强度
 **/
GPB_FINAL @interface StrategyPoolCxqnJhjjZtqd_List : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 入选时间 */
@property(nonatomic, readwrite) uint64_t selecttime;

/** 入选价格 */
@property(nonatomic, readwrite) double selectprice;

/** 入选涨幅 */
@property(nonatomic, readwrite) double selectzaf;

/** 入选后5日涨幅 */
@property(nonatomic, readwrite) double fivedayszaf;

@property(nonatomic, readwrite) double fState;

@property(nonatomic, readwrite) uint32_t days;

@property(nonatomic, readwrite) double fex;

@end

#pragma mark - StrategyPoolCxqnJhjjZtqd_Result

typedef GPB_ENUM(StrategyPoolCxqnJhjjZtqd_Result_FieldNumber) {
  StrategyPoolCxqnJhjjZtqd_Result_FieldNumber_Groupid = 1,
  StrategyPoolCxqnJhjjZtqd_Result_FieldNumber_Typecode = 2,
  StrategyPoolCxqnJhjjZtqd_Result_FieldNumber_Name = 3,
  StrategyPoolCxqnJhjjZtqd_Result_FieldNumber_PoollistsArray = 4,
};

GPB_FINAL @interface StrategyPoolCxqnJhjjZtqd_Result : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *groupid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *typecode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<StrategyPoolCxqnJhjjZtqd_List*> *poollistsArray;
/** The number of items in @c poollistsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger poollistsArray_Count;

@end

#pragma mark - Strategy_HisSignal_Data

typedef GPB_ENUM(Strategy_HisSignal_Data_FieldNumber) {
  Strategy_HisSignal_Data_FieldNumber_Date = 1,
  Strategy_HisSignal_Data_FieldNumber_Hms = 2,
  Strategy_HisSignal_Data_FieldNumber_Bs = 3,
};

/**
 * 个股 策略历史信号 20114
 **/
GPB_FINAL @interface Strategy_HisSignal_Data : GPBMessage

@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite) uint32_t hms;

@property(nonatomic, readwrite) uint32_t bs;

@end

#pragma mark - Strategy_HisSignal_Ans

typedef GPB_ENUM(Strategy_HisSignal_Ans_FieldNumber) {
  Strategy_HisSignal_Ans_FieldNumber_Code = 1,
  Strategy_HisSignal_Ans_FieldNumber_SignalsArray = 2,
};

GPB_FINAL @interface Strategy_HisSignal_Ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Strategy_HisSignal_Data*> *signalsArray;
/** The number of items in @c signalsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger signalsArray_Count;

@end

#pragma mark - StrategyMixPool_Req

typedef GPB_ENUM(StrategyMixPool_Req_FieldNumber) {
  StrategyMixPool_Req_FieldNumber_Date = 1,
  StrategyMixPool_Req_FieldNumber_Typecode = 2,
  StrategyMixPool_Req_FieldNumber_KeytypesArray = 3,
};

/**
 * 股票池交集请求 20115
 **/
GPB_FINAL @interface StrategyMixPool_Req : GPBMessage

@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite, copy, null_resettable) NSString *typecode;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *keytypesArray;
/** The number of items in @c keytypesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger keytypesArray_Count;

@end

#pragma mark - StrategyMixPool_Data

typedef GPB_ENUM(StrategyMixPool_Data_FieldNumber) {
  StrategyMixPool_Data_FieldNumber_Code = 1,
  StrategyMixPool_Data_FieldNumber_Groupid = 2,
  StrategyMixPool_Data_FieldNumber_Selecttime = 3,
  StrategyMixPool_Data_FieldNumber_Selectprice = 4,
  StrategyMixPool_Data_FieldNumber_ZafSelect = 5,
  StrategyMixPool_Data_FieldNumber_Zaf5Days = 6,
  StrategyMixPool_Data_FieldNumber_ZafOpen = 7,
  StrategyMixPool_Data_FieldNumber_Zaf = 8,
  StrategyMixPool_Data_FieldNumber_Days = 9,
  StrategyMixPool_Data_FieldNumber_Exdata = 10,
  StrategyMixPool_Data_FieldNumber_Date = 11,
  StrategyMixPool_Data_FieldNumber_DparamArray = 12,
};

/**
 * 合并 stock_select  pool_select  poolsh50_select   onekey_select bigdata_select  t0_select
 **/
GPB_FINAL @interface StrategyMixPool_Data : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *groupid;

@property(nonatomic, readwrite) uint64_t selecttime;

@property(nonatomic, readwrite) double selectprice;

/** 入选涨幅 */
@property(nonatomic, readwrite) double zafSelect;

/** 入选后5日最大涨幅 */
@property(nonatomic, readwrite) double zaf5Days;

/** 相对于开盘涨幅 */
@property(nonatomic, readwrite) double zafOpen;

/** 当日涨幅 */
@property(nonatomic, readwrite) double zaf;

/** 连涨天数 */
@property(nonatomic, readwrite) uint32_t days;

/** 累计涨幅/打开累计跌幅/开市价格 */
@property(nonatomic, readwrite) double exdata;

@property(nonatomic, readwrite) uint32_t date;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *dparamArray;
/** The number of items in @c dparamArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dparamArray_Count;

@end

#pragma mark - StrategyAny_Ans

typedef GPB_ENUM(StrategyAny_Ans_FieldNumber) {
  StrategyAny_Ans_FieldNumber_CldataArray = 1,
};

/**
 * 合并到 StrategyAny_Ans 通用应答包
 * message    StrategyMixPool_Ans
 * {
 *     repeated    StrategyMixPool_Data    data=1;
 * }
 **/
GPB_FINAL @interface StrategyAny_Ans : GPBMessage

/** 下面是具体的包体 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<GPBAny*> *cldataArray;
/** The number of items in @c cldataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cldataArray_Count;

@end

#pragma mark - JobImport_Data

typedef GPB_ENUM(JobImport_Data_FieldNumber) {
  JobImport_Data_FieldNumber_Groupid = 1,
  JobImport_Data_FieldNumber_Name = 2,
};

/**
 * 导入策略列表 20130
 * 导入策略收益曲线 20131
 * 导入策略持仓股票 20132
 * 导入策略实时调仓指令 20133
 * 导入策略评分 20134
 * 导入策略交易统计 20135
 * message StrategyCenterList_Req
 **/
GPB_FINAL @interface JobImport_Data : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *groupid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - IncomeLine

typedef GPB_ENUM(IncomeLine_FieldNumber) {
  IncomeLine_FieldNumber_Date = 1,
  IncomeLine_FieldNumber_State = 2,
  IncomeLine_FieldNumber_Zstotalrate = 3,
  IncomeLine_FieldNumber_Totalrate = 4,
  IncomeLine_FieldNumber_Zsdayrate = 5,
  IncomeLine_FieldNumber_Dayrate = 6,
};

GPB_FINAL @interface IncomeLine : GPBMessage

/** 日期 */
@property(nonatomic, readwrite) uint32_t date;

/** 择时 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *state;

/** 沪深300累计收益率 */
@property(nonatomic, readwrite) double zstotalrate;

/** 策略累计收益率 */
@property(nonatomic, readwrite) double totalrate;

/** 沪深300每日收益率 */
@property(nonatomic, readwrite) double zsdayrate;

/** 策略每日收益率 */
@property(nonatomic, readwrite) double dayrate;

@end

#pragma mark - IncomeStatistics

typedef GPB_ENUM(IncomeStatistics_FieldNumber) {
  IncomeStatistics_FieldNumber_Type = 1,
  IncomeStatistics_FieldNumber_Total = 2,
  IncomeStatistics_FieldNumber_Year = 3,
  IncomeStatistics_FieldNumber_Sharprate = 4,
  IncomeStatistics_FieldNumber_Backset = 5,
  IncomeStatistics_FieldNumber_Baudrate = 6,
  IncomeStatistics_FieldNumber_Inforate = 7,
  IncomeStatistics_FieldNumber_Beta = 8,
  IncomeStatistics_FieldNumber_Alpha = 9,
};

GPB_FINAL @interface IncomeStatistics : GPBMessage

/** 2本策略，3沪深300，4相对收益 */
@property(nonatomic, readwrite) uint32_t type;

/** 总收益 */
@property(nonatomic, readwrite) double total;

/** 年化收益 */
@property(nonatomic, readwrite) double year;

/** 夏普比率 */
@property(nonatomic, readwrite) double sharprate;

/** 最大回撤率 */
@property(nonatomic, readwrite) double backset;

/** 收益波动率 */
@property(nonatomic, readwrite) double baudrate;

/** 信息比率 */
@property(nonatomic, readwrite) double inforate;

@property(nonatomic, readwrite) double beta;

@property(nonatomic, readwrite) double alpha;

@end

#pragma mark - Stock_Calc_Info

typedef GPB_ENUM(Stock_Calc_Info_FieldNumber) {
  Stock_Calc_Info_FieldNumber_Nkey = 1,
  Stock_Calc_Info_FieldNumber_Score = 2,
  Stock_Calc_Info_FieldNumber_Earnvalue = 3,
  Stock_Calc_Info_FieldNumber_Rank = 4,
};

/**
 * 慧眼评级 20150
 * struct Hypj_Zhpf
 * {
 *     UINT64 nkey;
 *     double score;
 * };
 * 盈利能力
 * struct Earn_Ans
 * {
 *     UINT64 nkey;
 *     double value;
 * };
 * 个股评级，盈利等计算结果
 **/
GPB_FINAL @interface Stock_Calc_Info : GPBMessage

@property(nonatomic, readwrite) uint64_t nkey;

/** 评级 */
@property(nonatomic, readwrite) double score;

/** 盈利能力 */
@property(nonatomic, readwrite) double earnvalue;

@property(nonatomic, readwrite) uint32_t rank;

@end

#pragma mark - StrategyRemark

typedef GPB_ENUM(StrategyRemark_FieldNumber) {
  StrategyRemark_FieldNumber_Author = 1,
  StrategyRemark_FieldNumber_Createdate = 2,
  StrategyRemark_FieldNumber_Nextdate = 3,
  StrategyRemark_FieldNumber_Backdates = 4,
  StrategyRemark_FieldNumber_Backdatee = 5,
  StrategyRemark_FieldNumber_Potimer = 6,
  StrategyRemark_FieldNumber_Realtime = 7,
  StrategyRemark_FieldNumber_Period = 8,
  StrategyRemark_FieldNumber_Model = 9,
  StrategyRemark_FieldNumber_Stocknum = 10,
  StrategyRemark_FieldNumber_Chose = 11,
  StrategyRemark_FieldNumber_Staticpool = 12,
  StrategyRemark_FieldNumber_Base = 13,
  StrategyRemark_FieldNumber_Fee = 14,
  StrategyRemark_FieldNumber_Remark = 15,
};

/**
 * 导入策略注释说明
 **/
GPB_FINAL @interface StrategyRemark : GPBMessage

/** [VAR_NAME_LEN];    // 作者 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *author;

/** 创建日期 */
@property(nonatomic, readwrite) uint32_t createdate;

/** 下个调仓日期 */
@property(nonatomic, readwrite) uint32_t nextdate;

/** 回撤日期开始日 */
@property(nonatomic, readwrite) uint32_t backdates;

/** 回测日期结束日 */
@property(nonatomic, readwrite) uint32_t backdatee;

/** 调仓时点 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *potimer;

/** 是否实时策略 */
@property(nonatomic, readwrite) uint32_t realtime;

/** 调仓周期 */
@property(nonatomic, readwrite) uint32_t period;

/** [32]; // 交易模型 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/** 持仓股票 */
@property(nonatomic, readwrite) uint32_t stocknum;

/** 大盘择时 */
@property(nonatomic, readwrite) uint32_t chose;

/** 静态股票池 */
@property(nonatomic, readwrite) uint32_t staticpool;

/** [VAR_NAME_LEN]; // 收益基准 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *base;

/** [VAR_NAME_LEN]; // 交易费用 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fee;

/** [256]; // 策略描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *remark;

@end

#pragma mark - StrategyScore

typedef GPB_ENUM(StrategyScore_FieldNumber) {
  StrategyScore_FieldNumber_Earn = 1,
  StrategyScore_FieldNumber_Kfx = 2,
  StrategyScore_FieldNumber_Ldx = 3,
  StrategyScore_FieldNumber_Wdx = 4,
  StrategyScore_FieldNumber_Sp = 5,
  StrategyScore_FieldNumber_Score = 6,
};

GPB_FINAL @interface StrategyScore : GPBMessage

/** 收益 */
@property(nonatomic, readwrite) double earn;

/** 抗风险 */
@property(nonatomic, readwrite) double kfx;

/** 流动性 */
@property(nonatomic, readwrite) double ldx;

/** 稳定性 */
@property(nonatomic, readwrite) double wdx;

/** 实盘 */
@property(nonatomic, readwrite) double sp;

/** 总评分 */
@property(nonatomic, readwrite) double score;

@end

#pragma mark - StockTradeInfo

typedef GPB_ENUM(StockTradeInfo_FieldNumber) {
  StockTradeInfo_FieldNumber_Code = 1,
  StockTradeInfo_FieldNumber_Name = 2,
  StockTradeInfo_FieldNumber_Intrutype = 3,
  StockTradeInfo_FieldNumber_Intrusecond = 4,
  StockTradeInfo_FieldNumber_Buydate = 5,
  StockTradeInfo_FieldNumber_Selldate = 6,
  StockTradeInfo_FieldNumber_Buyprice = 7,
  StockTradeInfo_FieldNumber_Sellprice = 8,
  StockTradeInfo_FieldNumber_Zaf = 9,
  StockTradeInfo_FieldNumber_Closeprice = 10,
  StockTradeInfo_FieldNumber_Position = 11,
};

/**
 * HisTrader   PositionStock 共用
 * 历史交易记录
 * 持仓股票
 **/
GPB_FINAL @interface StockTradeInfo : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 股票名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 行业分类 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *intrutype;

/** 二级行业 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *intrusecond;

/** 买入日期 */
@property(nonatomic, readwrite) uint32_t buydate;

/** 卖出日期 */
@property(nonatomic, readwrite) uint32_t selldate;

/** 买入价格(前复权) */
@property(nonatomic, readwrite) double buyprice;

/** 卖出价格(前复权) */
@property(nonatomic, readwrite) double sellprice;

/** 涨幅 */
@property(nonatomic, readwrite) double zaf;

/** 最近收盘价 */
@property(nonatomic, readwrite) double closeprice;

/** 当前仓位 */
@property(nonatomic, readwrite) double position;

@end

#pragma mark - ChangePosition

typedef GPB_ENUM(ChangePosition_FieldNumber) {
  ChangePosition_FieldNumber_Code = 1,
  ChangePosition_FieldNumber_Name = 2,
  ChangePosition_FieldNumber_Intrutype = 3,
  ChangePosition_FieldNumber_Intrusecond = 4,
  ChangePosition_FieldNumber_Signal = 5,
  ChangePosition_FieldNumber_Position = 6,
  ChangePosition_FieldNumber_Price = 7,
};

GPB_FINAL @interface ChangePosition : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

/** 股票名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 行业分类 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *intrutype;

/** 二级行业 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *intrusecond;

/** 信号 正数：买入股数 如 24700 代表买入24700股；负数：卖出股数 如 -5400 代表卖出5400股；0 : 表示全部卖出 */
@property(nonatomic, readwrite) uint32_t signal;

/** 目标仓位 */
@property(nonatomic, readwrite) double position;

/** 参考价 */
@property(nonatomic, readwrite) double price;

@end

#pragma mark - TransStatistics

typedef GPB_ENUM(TransStatistics_FieldNumber) {
  TransStatistics_FieldNumber_Year = 1,
  TransStatistics_FieldNumber_Avehold = 2,
  TransStatistics_FieldNumber_Aveday = 3,
  TransStatistics_FieldNumber_Aveincome = 4,
  TransStatistics_FieldNumber_Avepoincome = 5,
  TransStatistics_FieldNumber_Aveneincome = 6,
  TransStatistics_FieldNumber_Winrate = 7,
  TransStatistics_FieldNumber_Closerate = 8,
  TransStatistics_FieldNumber_Dorate = 9,
  TransStatistics_FieldNumber_Times = 10,
  TransStatistics_FieldNumber_Yearincome = 11,
  TransStatistics_FieldNumber_Month = 12,
  TransStatistics_FieldNumber_Zsdiss = 13,
};

GPB_FINAL @interface TransStatistics : GPBMessage

/** 年换手率% */
@property(nonatomic, readwrite) double year;

/** 平均持仓股票数 */
@property(nonatomic, readwrite) double avehold;

/** 平均持有天数 */
@property(nonatomic, readwrite) double aveday;

/** 平均交易收益% */
@property(nonatomic, readwrite) double aveincome;

/** 正收益平均% */
@property(nonatomic, readwrite) double avepoincome;

/** 负收益平均% */
@property(nonatomic, readwrite) double aveneincome;

/** 交易赢率% */
@property(nonatomic, readwrite) double winrate;

/** 持仓停牌股票比例% */
@property(nonatomic, readwrite) double closerate;

/** 调仓指令可执行比例% */
@property(nonatomic, readwrite) double dorate;

/** 换股次数 */
@property(nonatomic, readwrite) uint32_t times;

/** 去极值年化收益% */
@property(nonatomic, readwrite) double yearincome;

/** 月赢率% */
@property(nonatomic, readwrite) double month;

/** 指数跟踪误差% */
@property(nonatomic, readwrite) double zsdiss;

@end

#pragma mark - KCBDATA

typedef GPB_ENUM(KCBDATA_FieldNumber) {
  KCBDATA_FieldNumber_Nkey = 1,
  KCBDATA_FieldNumber_JclTime = 2,
  KCBDATA_FieldNumber_Status = 3,
  KCBDATA_FieldNumber_Tickcount = 4,
  KCBDATA_FieldNumber_FPrice = 5,
  KCBDATA_FieldNumber_FAmt = 6,
  KCBDATA_FieldNumber_FVol = 7,
  KCBDATA_FieldNumber_FNowAmt = 8,
  KCBDATA_FieldNumber_FNowVol = 9,
  KCBDATA_FieldNumber_FBuyvol = 10,
  KCBDATA_FieldNumber_FSellvol = 11,
};

GPB_FINAL @interface KCBDATA : GPBMessage

@property(nonatomic, readwrite) uint64_t nkey;

/** 时间 */
@property(nonatomic, readwrite) int64_t jclTime;

/** 状态 */
@property(nonatomic, readwrite) int32_t status;

/** 成交笔数 */
@property(nonatomic, readwrite) int32_t tickcount;

/** 今收盘价 */
@property(nonatomic, readwrite) double fPrice;

/** 总成交额 */
@property(nonatomic, readwrite) double fAmt;

/** 总成交量 */
@property(nonatomic, readwrite) double fVol;

/** 当前成交额 */
@property(nonatomic, readwrite) double fNowAmt;

/** 当前成交量 */
@property(nonatomic, readwrite) double fNowVol;

/** 买量 */
@property(nonatomic, readwrite) double fBuyvol;

/** 卖量 */
@property(nonatomic, readwrite) double fSellvol;

@end

#pragma mark - KCBDataEx

typedef GPB_ENUM(KCBDataEx_FieldNumber) {
  KCBDataEx_FieldNumber_PKcbdate = 1,
  KCBDataEx_FieldNumber_BsDirect = 2,
  KCBDataEx_FieldNumber_DVolume = 3,
  KCBDataEx_FieldNumber_OrderNumer = 4,
  KCBDataEx_FieldNumber_OrderNo = 5,
  KCBDataEx_FieldNumber_OrderVolArray = 6,
};

GPB_FINAL @interface KCBDataEx : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) KCBDATA *pKcbdate;
/** Test to see if @c pKcbdate has been set. */
@property(nonatomic, readwrite) BOOL hasPKcbdate;

/** 买卖方向 0:买 1:卖 -1:无 */
@property(nonatomic, readwrite) int32_t bsDirect;

/** 申买(卖)量 */
@property(nonatomic, readwrite) double dVolume;

/** 实际委托笔数 */
@property(nonatomic, readwrite) int32_t orderNumer;

/** 公布的委托笔数 */
@property(nonatomic, readwrite) int32_t orderNo;

/** 委托队列 */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *orderVolArray;
/** The number of items in @c orderVolArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger orderVolArray_Count;

@end

#pragma mark - KCBDataAns

typedef GPB_ENUM(KCBDataAns_FieldNumber) {
  KCBDataAns_FieldNumber_FieldArray = 1,
};

GPB_FINAL @interface KCBDataAns : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<KCBDataEx*> *fieldArray;
/** The number of items in @c fieldArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldArray_Count;

@end

#pragma mark - AuctionDataB

typedef GPB_ENUM(AuctionDataB_FieldNumber) {
  AuctionDataB_FieldNumber_JclTime = 1,
  AuctionDataB_FieldNumber_FNow = 2,
  AuctionDataB_FieldNumber_FNowVol = 3,
};

GPB_FINAL @interface AuctionDataB : GPBMessage

/** 时间精确到毫秒 */
@property(nonatomic, readwrite) int64_t jclTime;

/** 现价*1000 */
@property(nonatomic, readwrite) double fNow;

/** 现手 */
@property(nonatomic, readwrite) double fNowVol;

@end

#pragma mark - AuctionDataBEx

typedef GPB_ENUM(AuctionDataBEx_FieldNumber) {
  AuctionDataBEx_FieldNumber_PAuctiondatab = 1,
  AuctionDataBEx_FieldNumber_FUnsuitVol = 2,
  AuctionDataBEx_FieldNumber_NUnsuitBs = 3,
};

GPB_FINAL @interface AuctionDataBEx : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) AuctionDataB *pAuctiondatab;
/** Test to see if @c pAuctiondatab has been set. */
@property(nonatomic, readwrite) BOOL hasPAuctiondatab;

/** 未匹配量 */
@property(nonatomic, readwrite) double fUnsuitVol;

/** 未匹配方向 0:卖 1:买 2:未匹配量为0，没有方向 */
@property(nonatomic, readwrite) int32_t nUnsuitBs;

@end

#pragma mark - Binary_Data_Ans

typedef GPB_ENUM(Binary_Data_Ans_FieldNumber) {
  Binary_Data_Ans_FieldNumber_Data_p = 1,
};

/**
 * COMBAVERAGE_NREQ                = 1359;    // 请求Average.csv
 * COMBBLOCK_NREQ                    = 1360; // 请求block.xml
 **/
GPB_FINAL @interface Binary_Data_Ans : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *data_p;

@end

#pragma mark - moneyflow_req

typedef GPB_ENUM(moneyflow_req_FieldNumber) {
  moneyflow_req_FieldNumber_Code = 1,
  moneyflow_req_FieldNumber_Offset = 2,
  moneyflow_req_FieldNumber_Num = 3,
};

GPB_FINAL @interface moneyflow_req : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t offset;

@property(nonatomic, readwrite) uint32_t num;

@end

#pragma mark - moneyflow_data

typedef GPB_ENUM(moneyflow_data_FieldNumber) {
  moneyflow_data_FieldNumber_Jcltime = 1,
  moneyflow_data_FieldNumber_SuperIn = 2,
  moneyflow_data_FieldNumber_SuperOut = 3,
  moneyflow_data_FieldNumber_BigIn = 4,
  moneyflow_data_FieldNumber_BigOut = 5,
  moneyflow_data_FieldNumber_MidIn = 6,
  moneyflow_data_FieldNumber_MidOut = 7,
  moneyflow_data_FieldNumber_SmallIn = 8,
  moneyflow_data_FieldNumber_SmallOut = 9,
};

GPB_FINAL @interface moneyflow_data : GPBMessage

@property(nonatomic, readwrite) int64_t jcltime;

@property(nonatomic, readwrite) double superIn;

@property(nonatomic, readwrite) double superOut;

@property(nonatomic, readwrite) double bigIn;

@property(nonatomic, readwrite) double bigOut;

@property(nonatomic, readwrite) double midIn;

@property(nonatomic, readwrite) double midOut;

@property(nonatomic, readwrite) double smallIn;

@property(nonatomic, readwrite) double smallOut;

@end

#pragma mark - moneyflow_ans

typedef GPB_ENUM(moneyflow_ans_FieldNumber) {
  moneyflow_ans_FieldNumber_AmtArray = 1,
  moneyflow_ans_FieldNumber_VolArray = 2,
  moneyflow_ans_FieldNumber_CntArray = 3,
};

GPB_FINAL @interface moneyflow_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<moneyflow_data*> *amtArray;
/** The number of items in @c amtArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger amtArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<moneyflow_data*> *volArray;
/** The number of items in @c volArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger volArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<moneyflow_data*> *cntArray;
/** The number of items in @c cntArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cntArray_Count;

@end

#pragma mark - dxjl_data

typedef GPB_ENUM(dxjl_data_FieldNumber) {
  dxjl_data_FieldNumber_Code = 1,
  dxjl_data_FieldNumber_Type = 2,
  dxjl_data_FieldNumber_Name = 3,
  dxjl_data_FieldNumber_Jcltime = 4,
  dxjl_data_FieldNumber_Price = 5,
  dxjl_data_FieldNumber_Vol = 6,
  dxjl_data_FieldNumber_Zaf = 7,
  dxjl_data_FieldNumber_Rate = 8,
  dxjl_data_FieldNumber_Buyprice = 9,
  dxjl_data_FieldNumber_Buyvol = 10,
  dxjl_data_FieldNumber_Sellprice = 11,
  dxjl_data_FieldNumber_Sellvol = 12,
};

GPB_FINAL @interface dxjl_data : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t type;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int64_t jcltime;

@property(nonatomic, readwrite) double price;

@property(nonatomic, readwrite) double vol;

@property(nonatomic, readwrite) double zaf;

@property(nonatomic, readwrite) double rate;

@property(nonatomic, readwrite) double buyprice;

@property(nonatomic, readwrite) double buyvol;

@property(nonatomic, readwrite) double sellprice;

@property(nonatomic, readwrite) double sellvol;

@end

#pragma mark - dxjl_push

typedef GPB_ENUM(dxjl_push_FieldNumber) {
  dxjl_push_FieldNumber_DataArray = 1,
};

GPB_FINAL @interface dxjl_push : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<dxjl_data*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

@end

#pragma mark - Dxjl_Req

typedef GPB_ENUM(Dxjl_Req_FieldNumber) {
  Dxjl_Req_FieldNumber_Offset = 1,
  Dxjl_Req_FieldNumber_Num = 2,
  Dxjl_Req_FieldNumber_Type = 3,
};

GPB_FINAL @interface Dxjl_Req : GPBMessage

@property(nonatomic, readwrite) uint32_t offset;

@property(nonatomic, readwrite) uint32_t num;

@property(nonatomic, readwrite) uint32_t type;

@end

#pragma mark - RSPDATA

typedef GPB_ENUM(RSPDATA_FieldNumber) {
  RSPDATA_FieldNumber_Type = 1,
  RSPDATA_FieldNumber_Code = 2,
  RSPDATA_FieldNumber_Jcltime = 3,
  RSPDATA_FieldNumber_DateArray = 4,
};

GPB_FINAL @interface RSPDATA : GPBMessage

@property(nonatomic, readwrite) uint32_t type;

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) int64_t jcltime;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *dateArray;
/** The number of items in @c dateArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dateArray_Count;

@end

#pragma mark - Dxjl_ans

typedef GPB_ENUM(Dxjl_ans_FieldNumber) {
  Dxjl_ans_FieldNumber_FieldArray = 1,
};

GPB_FINAL @interface Dxjl_ans : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RSPDATA*> *fieldArray;
/** The number of items in @c fieldArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger fieldArray_Count;

@end

#pragma mark - ReCalcParamInfoEx

typedef GPB_ENUM(ReCalcParamInfoEx_FieldNumber) {
  ReCalcParamInfoEx_FieldNumber_SzName = 1,
  ReCalcParamInfoEx_FieldNumber_SzParamInfo = 2,
  ReCalcParamInfoEx_FieldNumber_FMin = 3,
  ReCalcParamInfoEx_FieldNumber_FMax = 4,
  ReCalcParamInfoEx_FieldNumber_DVal = 5,
  ReCalcParamInfoEx_FieldNumber_FStep = 6,
};

/**
 * 参数信息
 **/
GPB_FINAL @interface ReCalcParamInfoEx : GPBMessage

/** 参数名  (参数中文名) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szName;

/**     参数介绍，这些可以直接在数据库操作 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szParamInfo;

/** 最小 */
@property(nonatomic, readwrite) double fMin;

@property(nonatomic, readwrite) double fMax;

/** 计算总是根据dval来 ,fDef保留 */
@property(nonatomic, readwrite) double dVal;

/** 步长 */
@property(nonatomic, readwrite) double fStep;

@end

#pragma mark - RFormularSelfIndex

typedef GPB_ENUM(RFormularSelfIndex_FieldNumber) {
  RFormularSelfIndex_FieldNumber_NSet = 1,
  RFormularSelfIndex_FieldNumber_SzKey = 2,
  RFormularSelfIndex_FieldNumber_SzName = 3,
  RFormularSelfIndex_FieldNumber_DwKey = 4,
  RFormularSelfIndex_FieldNumber_DwGroup = 5,
  RFormularSelfIndex_FieldNumber_NDrawMode = 6,
  RFormularSelfIndex_FieldNumber_DGridInfosArray = 7,
  RFormularSelfIndex_FieldNumber_ParamsArray = 8,
};

/**
 * 自定义指标
 **/
GPB_FINAL @interface RFormularSelfIndex : GPBMessage

/** 指标集合 */
@property(nonatomic, readwrite) uint32_t nSet;

/** 指标英文名，关键字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szKey;

/** 指标中文名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szName;

@property(nonatomic, readwrite) uint64_t dwKey;

@property(nonatomic, readwrite) uint32_t dwGroup;

/** 表示是否主图,副图,缺省副图 */
@property(nonatomic, readwrite) uint32_t nDrawMode;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *dGridInfosArray;
/** The number of items in @c dGridInfosArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dGridInfosArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ReCalcParamInfoEx*> *paramsArray;
/** The number of items in @c paramsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger paramsArray_Count;

@end

#pragma mark - RFormularGroupList

typedef GPB_ENUM(RFormularGroupList_FieldNumber) {
  RFormularGroupList_FieldNumber_Group = 1,
  RFormularGroupList_FieldNumber_FormularsArray = 2,
};

GPB_FINAL @interface RFormularGroupList : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *group;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RFormularSelfIndex*> *formularsArray;
/** The number of items in @c formularsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger formularsArray_Count;

@end

#pragma mark - RFormularSelfIndex_Req

typedef GPB_ENUM(RFormularSelfIndex_Req_FieldNumber) {
  RFormularSelfIndex_Req_FieldNumber_NSet = 1,
  RFormularSelfIndex_Req_FieldNumber_SzKey = 2,
};

/**
 * 请求单个公式,应答就是具体 RFormularSelfIndex
 **/
GPB_FINAL @interface RFormularSelfIndex_Req : GPBMessage

/** 指标集合 */
@property(nonatomic, readwrite) uint32_t nSet;

/** 指标英文名，关键字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szKey;

@end

#pragma mark - RFormularSet_Req

typedef GPB_ENUM(RFormularSet_Req_FieldNumber) {
  RFormularSet_Req_FieldNumber_NSet = 1,
};

/**
 * 请求整个集合的公式，应答 FormularSet_Ans
 **/
GPB_FINAL @interface RFormularSet_Req : GPBMessage

/** 指标集合 */
@property(nonatomic, readwrite) uint32_t nSet;

@end

#pragma mark - RFormularSet_Ans

typedef GPB_ENUM(RFormularSet_Ans_FieldNumber) {
  RFormularSet_Ans_FieldNumber_NSet = 1,
  RFormularSet_Ans_FieldNumber_GroupformularsArray = 2,
};

GPB_FINAL @interface RFormularSet_Ans : GPBMessage

/** 指标集合 */
@property(nonatomic, readwrite) uint32_t nSet;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RFormularGroupList*> *groupformularsArray;
/** The number of items in @c groupformularsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger groupformularsArray_Count;

@end

#pragma mark - ReCalcFomular_Req

typedef GPB_ENUM(ReCalcFomular_Req_FieldNumber) {
  ReCalcFomular_Req_FieldNumber_NSet = 1,
  ReCalcFomular_Req_FieldNumber_SzKey = 2,
  ReCalcFomular_Req_FieldNumber_Code = 3,
  ReCalcFomular_Req_FieldNumber_Period = 4,
  ReCalcFomular_Req_FieldNumber_Tqflag = 5,
  ReCalcFomular_Req_FieldNumber_ParamsArray = 6,
};

/**
 * 计算后的公式请求(如果只是提取因子库，不用指定参数，指定也无效，已经计算好了)
 **/
GPB_FINAL @interface ReCalcFomular_Req : GPBMessage

/** 指标集合 */
@property(nonatomic, readwrite) uint32_t nSet;

/** 指标英文名，关键字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szKey;

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t period;

/** 复权标志 */
@property(nonatomic, readwrite) uint32_t tqflag;

/** 设置参数，只需要填写参数名称和dval即可 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ReCalcParamInfoEx*> *paramsArray;
/** The number of items in @c paramsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger paramsArray_Count;

@end

#pragma mark - ReCalcOutVarInfo

typedef GPB_ENUM(ReCalcOutVarInfo_FieldNumber) {
  ReCalcOutVarInfo_FieldNumber_NType = 1,
  ReCalcOutVarInfo_FieldNumber_SzWord = 2,
  ReCalcOutVarInfo_FieldNumber_SzSpecial = 3,
  ReCalcOutVarInfo_FieldNumber_NColor = 4,
  ReCalcOutVarInfo_FieldNumber_NDrawMode = 5,
  ReCalcOutVarInfo_FieldNumber_NLineThick = 6,
  ReCalcOutVarInfo_FieldNumber_NPrecision = 7,
  ReCalcOutVarInfo_FieldNumber_Lineno = 8,
  ReCalcOutVarInfo_FieldNumber_ExterndatArray = 9,
  ReCalcOutVarInfo_FieldNumber_DVal = 10,
  ReCalcOutVarInfo_FieldNumber_LpArrayArray = 11,
  ReCalcOutVarInfo_FieldNumber_SzVal = 12,
  ReCalcOutVarInfo_FieldNumber_SzValArrayArray = 13,
};

/**
 * 计算公式的其中一个输出信息
 **/
GPB_FINAL @interface ReCalcOutVarInfo : GPBMessage

/** 数据类型'0' '1' '2' '3'(直接输出指定函数，函数怎么实现公式体不管) */
@property(nonatomic, readwrite) uint32_t nType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *szWord;

/** 特别输出: 空 没有 ； 1=强制输出，例如画图输出； */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szSpecial;

/** 0 忽略 */
@property(nonatomic, readwrite) uint32_t nColor;

/** 输出线的画法，样式指定 */
@property(nonatomic, readwrite) uint32_t nDrawMode;

/** 线的宽度 */
@property(nonatomic, readwrite) uint32_t nLineThick;

/** 精度 */
@property(nonatomic, readwrite) uint32_t nPrecision;

@property(nonatomic, readwrite) uint32_t lineno;

/** 扩展输出，通常不用 */
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *externdatArray;
/** The number of items in @c externdatArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger externdatArray_Count;

@property(nonatomic, readwrite) double dVal;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *lpArrayArray;
/** The number of items in @c lpArrayArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger lpArrayArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *szVal;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *szValArrayArray;
/** The number of items in @c szValArrayArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger szValArrayArray_Count;

@end

#pragma mark - ReCalcFomular_Ans

typedef GPB_ENUM(ReCalcFomular_Ans_FieldNumber) {
  ReCalcFomular_Ans_FieldNumber_NSet = 1,
  ReCalcFomular_Ans_FieldNumber_SzKey = 2,
  ReCalcFomular_Ans_FieldNumber_Code = 3,
  ReCalcFomular_Ans_FieldNumber_Period = 4,
  ReCalcFomular_Ans_FieldNumber_ParamsArray = 5,
  ReCalcFomular_Ans_FieldNumber_OutinfosArray = 6,
};

/**
 * 计算公式应答(或者因子，输出结果，和对应参数，股票品种，周期)
 **/
GPB_FINAL @interface ReCalcFomular_Ans : GPBMessage

/** 指标集合 */
@property(nonatomic, readwrite) uint32_t nSet;

/** 指标英文名，关键字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *szKey;

@property(nonatomic, readwrite, strong, null_resettable) tagCodeWithNkey *code;
/** Test to see if @c code has been set. */
@property(nonatomic, readwrite) BOOL hasCode;

@property(nonatomic, readwrite) uint32_t period;

/** 设置参数，只需要填写参数名称和dval即可 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ReCalcParamInfoEx*> *paramsArray;
/** The number of items in @c paramsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger paramsArray_Count;

/** 公式有多个输出 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ReCalcOutVarInfo*> *outinfosArray;
/** The number of items in @c outinfosArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outinfosArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
